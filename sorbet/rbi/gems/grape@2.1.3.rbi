# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `grape` gem.
# Please instead update this file by running `bin/tapioca gem grape`.


# source://grape//lib/grape/validations/types/dry_type_coercer.rb#3
module DryTypes
  extend ::Dry::Types::BuilderMethods
  extend ::Dry::Core::Deprecations::Interface

  mixes_in_class_methods ::Dry::Types::BuilderMethods
end

# Based on https://github.com/HornsAndHooves/lazy_object
#
# source://grape//lib/grape.rb#58
module Grape
  include ::ActiveSupport::Configurable
  extend ::ActiveSupport::Configurable::ClassMethods

  class << self
    # source://grape//lib/grape.rb#61
    def deprecator; end
  end
end

# The API class is the primary entry point for creating Grape APIs. Users
# should subclass this class in order to build an API.
#
# source://grape//lib/grape/api.rb#6
class Grape::API
  class << self
    # Returns the value of attribute base_instance.
    #
    # source://grape//lib/grape/api.rb#23
    def base_instance; end

    # Sets the attribute base_instance
    #
    # @param value the value to set the attribute base_instance to.
    #
    # source://grape//lib/grape/api.rb#23
    def base_instance=(_arg0); end

    # This is the interface point between Rack and Grape; it accepts a request
    # from Rack and ultimately returns an array of three values: the status,
    # the headers, and the body. See [the rack specification]
    # (http://www.rubydoc.info/github/rack/rack/master/file/SPEC) for more.
    # NOTE: This will only be called on an API directly mounted on RACK
    #
    # source://grape//lib/grape/api.rb#77
    def call(*_arg0, **_arg1, &_arg2); end

    # source://grape//lib/grape/api.rb#127
    def compile!; end

    # Configure an API from the outside. If a block is given, it'll pass a
    # configuration hash to the block which you can use to configure your
    # API. If no block is given, returns the configuration hash.
    # The configuration set here is accessible from inside an API with
    # `configuration` as normal.
    #
    # source://grape//lib/grape/api.rb#62
    def configure; end

    # Alleviates problems with autoloading by tring to search for the constant
    #
    # source://grape//lib/grape/api.rb#82
    def const_missing(*args); end

    # When inherited, will create a list of all instances (times the API was mounted)
    # It will listen to the setup required to mount that endpoint, and replicate it on any new instance
    #
    # source://grape//lib/grape/api.rb#32
    def inherited(api); end

    # Initialize the instance variables on the remountable class, and the base_instance
    # an instance that will be used to create the set up but will not be mounted
    #
    # source://grape//lib/grape/api.rb#41
    def initial_setup(base_instance_parent); end

    # Returns the value of attribute instances.
    #
    # source://grape//lib/grape/api.rb#23
    def instances; end

    # Sets the attribute instances
    #
    # @param value the value to set the attribute instances to.
    #
    # source://grape//lib/grape/api.rb#23
    def instances=(_arg0); end

    # source://grape//lib/grape/api.rb#118
    def method_missing(method, *args, &block); end

    # The remountable class can have a configuration hash to provide some dynamic class-level variables.
    # For instance, a description could be done using: `desc configuration[:description]` if it may vary
    # depending on where the endpoint is mounted. Use with care, if you find yourself using configuration
    # too much, you may actually want to provide a new API rather than remount it.
    #
    # source://grape//lib/grape/api.rb#94
    def mount_instance(**opts); end

    # Rather than initializing an object of type Grape::API, create an object of type Instance
    #
    # source://grape//lib/grape/api.rb#26
    def new(*_arg0, **_arg1, &_arg2); end

    # Redefines all methods so that are forwarded to add_setup and be recorded
    #
    # source://grape//lib/grape/api.rb#49
    def override_all_methods!; end

    # Replays the set up to produce an API as defined in this class, can be called
    # on classes that inherit from Grape::API
    #
    # source://grape//lib/grape/api.rb#104
    def replay_setup_on(instance); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/api.rb#110
    def respond_to?(method, include_private = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/api.rb#114
    def respond_to_missing?(method, include_private = T.unsafe(nil)); end

    private

    # Adds a new stage to the set up require to get a Grape::API up and running
    #
    # source://grape//lib/grape/api.rb#142
    def add_setup(method, *args, &block); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/api.rb#183
    def any_lazy?(args); end

    # source://grape//lib/grape/api.rb#187
    def evaluate_arguments(configuration, *args); end

    # source://grape//lib/grape/api.rb#133
    def instance_for_rack; end

    # source://grape//lib/grape/api.rb#205
    def mounted_instances; end

    # @return [Boolean]
    #
    # source://grape//lib/grape/api.rb#201
    def never_mounted?; end

    # source://grape//lib/grape/api.rb#165
    def replay_step_on(instance, setup_step); end

    # Skips steps that contain arguments to be lazily executed (on re-mount time)
    #
    # @return [Boolean]
    #
    # source://grape//lib/grape/api.rb#178
    def skip_immediate_run?(instance, args); end
  end
end

# source://grape//lib/grape/api.rb#10
class Grape::API::Boolean
  class << self
    # source://grape//lib/grape/api.rb#11
    def build(val); end
  end
end

# source://grape//lib/grape/api/helpers.rb#5
module Grape::API::Helpers
  include ::Grape::DSL::Helpers::BaseHelper
end

# The API Instance class, is the engine behind Grape::API. Each class that inherits
# from this will represent a different API instance
#
# source://grape//lib/grape/api/instance.rb#7
class Grape::API::Instance
  include ::Grape::Middleware::Auth::DSL
  include ::Grape::DSL::Configuration
  include ::Grape::DSL::Validations
  include ::Grape::DSL::Callbacks
  include ::Grape::DSL::Helpers
  include ::Grape::DSL::Middleware
  include ::Grape::DSL::RequestResponse
  include ::Grape::DSL::Routing
  include ::Grape::DSL::API
  extend ::Grape::Middleware::Auth::DSL::ClassMethods
  extend ::Grape::DSL::Settings
  extend ::Grape::DSL::Logger
  extend ::Grape::DSL::Desc
  extend ::Grape::DSL::Configuration::ClassMethods
  extend ::Grape::DSL::Validations::ClassMethods
  extend ::Grape::DSL::Callbacks::ClassMethods
  extend ::Grape::DSL::Helpers::ClassMethods
  extend ::Grape::DSL::Middleware::ClassMethods
  extend ::Grape::DSL::RequestResponse::ClassMethods
  extend ::Grape::DSL::Routing::ClassMethods

  # Builds the routes from the defined endpoints, effectively compiling
  # this API into a usable form.
  #
  # @return [Instance] a new instance of Instance
  #
  # source://grape//lib/grape/api/instance.rb#151
  def initialize; end

  # Handle a request. See Rack documentation for what `env` is.
  #
  # source://grape//lib/grape/api/instance.rb#163
  def call(env); end

  # Some requests may return a HTTP 404 error if grape cannot find a matching
  # route. In this case, Grape::Router adds a X-Cascade header to the response
  # and sets it to 'pass', indicating to grape's parents they should keep
  # looking for a matching route on other resources.
  #
  # In some applications (e.g. mounting grape on rails), one might need to trap
  # errors from reaching upstream. This is effectivelly done by unsetting
  # X-Cascade. Default :cascade is true.
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/api/instance.rb#181
  def cascade?; end

  # Returns the value of attribute router.
  #
  # source://grape//lib/grape/api/instance.rb#147
  def router; end

  private

  # For every resource add a 'OPTIONS' route that returns an HTTP 204 response
  # with a list of HTTP methods that can be called. Also add a route that
  # will return an HTTP 405 response for any HTTP method that the resource
  # cannot handle.
  #
  # source://grape//lib/grape/api/instance.rb#196
  def add_head_not_allowed_methods_and_options_methods; end

  # source://grape//lib/grape/api/instance.rb#222
  def collect_route_config_per_pattern; end

  # Generate a route that returns an HTTP 405 response for a user defined
  # path on methods not specified
  #
  # source://grape//lib/grape/api/instance.rb#243
  def generate_not_allowed_method(pattern, allowed_methods: T.unsafe(nil), **attributes); end

  # Allows definition of endpoints that ignore the root prefix used by the
  # rest of your API.
  #
  # source://grape//lib/grape/api/instance.rb#271
  def without_root_prefix(&_block); end

  # Allows definition of endpoints that ignore the versioning configuration
  # used by the rest of your API.
  #
  # source://grape//lib/grape/api/instance.rb#256
  def without_versioning(&_block); end

  class << self
    # Returns the value of attribute base.
    #
    # source://grape//lib/grape/api/instance.rb#11
    def base; end

    # source://grape//lib/grape/api/instance.rb#22
    def base=(grape_api); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/api/instance.rb#31
    def base_instance?; end

    # This is the interface point between Rack and Grape; it accepts a request
    # from Rack and ultimately returns an array of three values: the status,
    # the headers, and the body. See [the rack specification]
    # (http://www.rubydoc.info/github/rack/rack/master/file/SPEC) for more.
    #
    # source://grape//lib/grape/api/instance.rb#61
    def call(env); end

    # A non-synchronized version of ::call.
    #
    # source://grape//lib/grape/api/instance.rb#67
    def call!(env); end

    # Some requests may return a HTTP 404 error if grape cannot find a matching
    # route. In this case, Grape::Router adds a X-Cascade header to the response
    # and sets it to 'pass', indicating to grape's parents they should keep
    # looking for a matching route on other resources.
    #
    # In some applications (e.g. mounting grape on rails), one might need to trap
    # errors from reaching upstream. This is effectivelly done by unsetting
    # X-Cascade. Default :cascade is true.
    #
    # source://grape//lib/grape/api/instance.rb#72
    def cascade(value = T.unsafe(nil)); end

    # Wipe the compiled API so we can recompile after changes were made.
    #
    # source://grape//lib/grape/api/instance.rb#53
    def change!; end

    # Parses the API's definition and compiles it into an instance of
    # Grape::API.
    #
    # source://grape//lib/grape/api/instance.rb#48
    def compile; end

    # source://grape//lib/grape/api/instance.rb#80
    def compile!; end

    # Returns the value of attribute configuration.
    #
    # source://grape//lib/grape/api/instance.rb#12
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://grape//lib/grape/api/instance.rb#12
    def configuration=(_arg0); end

    # source://grape//lib/grape/api/instance.rb#14
    def given(conditional_option, &block); end

    # Returns the value of attribute instance.
    #
    # source://grape//lib/grape/api/instance.rb#11
    def instance; end

    # source://grape//lib/grape/api/instance.rb#18
    def mounted(&block); end

    # see Grape::Router#recognize_path
    #
    # source://grape//lib/grape/api/instance.rb#87
    def recognize_path(path); end

    # Clears all defined routes, endpoints, etc., on this API.
    #
    # source://grape//lib/grape/api/instance.rb#40
    def reset!; end

    # source://grape//lib/grape/api/instance.rb#27
    def to_s; end

    protected

    # source://grape//lib/grape/api/instance.rb#112
    def evaluate_as_instance_with_configuration(block, lazy: T.unsafe(nil)); end

    # source://grape//lib/grape/api/instance.rb#133
    def inherit_settings(other_settings); end

    # @private
    #
    # source://grape//lib/grape/api/instance.rb#127
    def inherited(subclass); end

    # Execute first the provided block, then each of the
    # block passed in. Allows for simple 'before' setups
    # of settings stack pushes.
    #
    # source://grape//lib/grape/api/instance.rb#101
    def nest(*blocks, &block); end

    # source://grape//lib/grape/api/instance.rb#94
    def prepare_routes; end
  end
end

# source://grape//lib/grape/api.rb#19
Grape::API::Instance::Boolean = Grape::API::Boolean

# Class methods that we want to call on the API rather than on the API object
#
# source://grape//lib/grape/api.rb#8
Grape::API::NON_OVERRIDABLE = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/content_types.rb#4
module Grape::ContentTypes
  extend ::Grape::Util::Registrable

  class << self
    # source://grape//lib/grape/content_types.rb#21
    def content_types_for(from_settings); end

    # source://grape//lib/grape/content_types.rb#17
    def content_types_for_settings(settings); end
  end
end

# Content types are listed in order of preference.
#
# source://grape//lib/grape/content_types.rb#8
Grape::ContentTypes::CONTENT_TYPES = T.let(T.unsafe(nil), Hash)

# source://grape//lib/grape/cookies.rb#4
class Grape::Cookies
  # @return [Cookies] a new instance of Cookies
  #
  # source://grape//lib/grape/cookies.rb#5
  def initialize; end

  # source://grape//lib/grape/cookies.rb#23
  def [](name); end

  # source://grape//lib/grape/cookies.rb#27
  def []=(name, value); end

  # see https://github.com/rack/rack/blob/main/lib/rack/utils.rb#L338-L340
  #
  # source://grape//lib/grape/cookies.rb#38
  def delete(name, **opts); end

  # source://grape//lib/grape/cookies.rb#32
  def each(&block); end

  # source://grape//lib/grape/cookies.rb#10
  def read(request); end

  # source://grape//lib/grape/cookies.rb#16
  def write(header); end
end

# source://grape//lib/grape/api/instance.rb#0
module Grape::DSL; end

# source://grape//lib/grape/dsl/api.rb#5
module Grape::DSL::API
  extend ::ActiveSupport::Concern
  include ::Grape::Middleware::Auth::DSL
  include ::Grape::DSL::Configuration
  include ::Grape::DSL::Validations
  include ::Grape::DSL::Callbacks
  include ::Grape::DSL::Helpers
  include ::Grape::DSL::Middleware
  include ::Grape::DSL::RequestResponse
  include ::Grape::DSL::Routing

  mixes_in_class_methods ::Grape::Middleware::Auth::DSL::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Validations::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Callbacks::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Helpers::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Middleware::ClassMethods
  mixes_in_class_methods ::Grape::DSL::RequestResponse::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Routing::ClassMethods
end

# Blocks can be executed before or after every API call, using `before`, `after`,
# `before_validation` and `after_validation`.
#
# Before and after callbacks execute in the following order:
#
# 1. `before`
# 2. `before_validation`
# 3. _validations_
# 4. `after_validation`
# 5. _the API call_
# 6. `after`
#
# Steps 4, 5 and 6 only happen if validation succeeds.
#
# source://grape//lib/grape/dsl/callbacks.rb#18
module Grape::DSL::Callbacks
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Callbacks::ClassMethods
end

# source://grape//lib/grape/dsl/callbacks.rb#23
module Grape::DSL::Callbacks::ClassMethods
  # Execute the given block after the endpoint code has run.
  #
  # source://grape//lib/grape/dsl/callbacks.rb#43
  def after(&block); end

  # Execute the given block after validations and coercions, but before
  # any endpoint code.
  #
  # source://grape//lib/grape/dsl/callbacks.rb#38
  def after_validation(&block); end

  # Execute the given block before validation, coercion, or any endpoint
  # code is executed.
  #
  # source://grape//lib/grape/dsl/callbacks.rb#26
  def before(&block); end

  # Execute the given block after `before`, but prior to validation or
  # coercion.
  #
  # source://grape//lib/grape/dsl/callbacks.rb#32
  def before_validation(&block); end

  # Allows you to specify a something that will always be executed after a call
  # API call. Unlike the `after` block, this code will run even on
  # unsuccesful requests.
  # This will make sure that the ApiLogger is opened and closed around every
  # request
  #
  # @example
  #   class ExampleAPI < Grape::API
  #   before do
  #   ApiLogger.start
  #   end
  #   finally do
  #   ApiLogger.close
  #   end
  #   end
  # @param ensured_block [Proc] The block to be executed after every api_call
  #
  # source://grape//lib/grape/dsl/callbacks.rb#63
  def finally(&block); end
end

# source://grape//lib/grape/dsl/configuration.rb#5
module Grape::DSL::Configuration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
end

# source://grape//lib/grape/dsl/configuration.rb#8
module Grape::DSL::Configuration::ClassMethods
  include ::Grape::DSL::Settings
  include ::Grape::DSL::Logger
  include ::Grape::DSL::Desc
end

# source://grape//lib/grape/dsl/desc.rb#5
module Grape::DSL::Desc
  include ::Grape::DSL::Settings

  # Add a description to the next namespace or function.
  #
  # @example
  #
  #   desc 'create a user'
  #   post '/users' do
  #   # ...
  #   end
  #
  #   desc 'find a user' do
  #   detail 'locates the user from the given user ID'
  #   failure [ [404, 'Couldn\'t find the given user' ] ]
  #   success User::Entity
  #   end
  #   get '/user/:id' do
  #   # ...
  #   end
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param description [String] descriptive string for this endpoint
  #   or namespace
  # @param options [Hash] other properties you can set to describe the
  #   endpoint or namespace. Optional.
  # @yield a block yielding an instance context with methods mapping to
  #   each of the above, except that :entity is also aliased as #success
  #   and :http_codes is aliased as #failure.
  #
  # source://grape//lib/grape/dsl/desc.rb#73
  def desc(description, options = T.unsafe(nil), &config_block); end

  # Returns an object which configures itself via an instance-context DSL.
  #
  # source://grape//lib/grape/dsl/desc.rb#103
  def desc_container(endpoint_configuration); end
end

# source://grape//lib/grape/dsl/desc.rb#8
Grape::DSL::Desc::ROUTE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/dsl/headers.rb#5
module Grape::DSL::Headers
  # This method has four responsibilities:
  # 1. Set a specifc header value by key
  # 2. Retrieve a specifc header value by key
  # 3. Retrieve all headers that have been set
  # 4. Delete a specifc header key-value pair
  #
  # source://grape//lib/grape/dsl/headers.rb#11
  def header(key = T.unsafe(nil), val = T.unsafe(nil)); end

  # This method has four responsibilities:
  # 1. Set a specifc header value by key
  # 2. Retrieve a specifc header value by key
  # 3. Retrieve all headers that have been set
  # 4. Delete a specifc header key-value pair
  #
  # source://grape//lib/grape/dsl/headers.rb#11
  def headers(key = T.unsafe(nil), val = T.unsafe(nil)); end
end

# source://grape//lib/grape/dsl/helpers.rb#5
module Grape::DSL::Helpers
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Helpers::ClassMethods
end

# This module extends user defined helpers
# to provide some API-specific functionality.
#
# source://grape//lib/grape/dsl/helpers.rb#81
module Grape::DSL::Helpers::BaseHelper
  # Returns the value of attribute api.
  #
  # source://grape//lib/grape/dsl/helpers.rb#82
  def api; end

  # Sets the attribute api
  #
  # @param value the value to set the attribute api to.
  #
  # source://grape//lib/grape/dsl/helpers.rb#82
  def api=(_arg0); end

  # source://grape//lib/grape/dsl/helpers.rb#89
  def api_changed(new_api); end

  # source://grape//lib/grape/dsl/helpers.rb#84
  def params(name, &block); end

  protected

  # source://grape//lib/grape/dsl/helpers.rb#96
  def process_named_params; end
end

# source://grape//lib/grape/dsl/helpers.rb#9
module Grape::DSL::Helpers::ClassMethods
  # Add helper methods that will be accessible from any
  # endpoint within this namespace (and child namespaces).
  #
  # When called without a block, all known helpers within this scope
  # are included.
  #
  # @example Define some helpers.
  #
  #   class ExampleAPI < Grape::API
  #   helpers do
  #   def current_user
  #   User.find_by_id(params[:token])
  #   end
  #   end
  #   end
  # @example Include many modules
  #
  #   class ExampleAPI < Grape::API
  #   helpers Authentication, Mailer, OtherModule
  #   end
  # @param new_modules [Array] optional array of modules to include
  # @param block [Block] optional block of methods to include
  #
  # source://grape//lib/grape/dsl/helpers.rb#35
  def helpers(*new_modules, &block); end

  protected

  # source://grape//lib/grape/dsl/helpers.rb#66
  def define_boolean_in_mod(mod); end

  # source://grape//lib/grape/dsl/helpers.rb#59
  def include_all_in_scope; end

  # source://grape//lib/grape/dsl/helpers.rb#47
  def include_block(block); end

  # source://grape//lib/grape/dsl/helpers.rb#43
  def include_new_modules(modules); end

  # source://grape//lib/grape/dsl/helpers.rb#72
  def inject_api_helpers_to_mod(mod, &block); end

  # source://grape//lib/grape/dsl/helpers.rb#53
  def make_inclusion(mod, &block); end
end

# source://grape//lib/grape/dsl/inside_route.rb#5
module Grape::DSL::InsideRoute
  include ::Grape::DSL::Headers
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Settings

  # Allows you to define the response body as something other than the
  # return value.
  #
  # @example
  #   get '/body' do
  #   body "Body"
  #   "Not the Body"
  #   end
  #
  #   GET /body # => "Body"
  #
  # source://grape//lib/grape/dsl/inside_route.rb#278
  def body(value = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/inside_route.rb#158
  def configuration; end

  # Set response content-type
  #
  # source://grape//lib/grape/dsl/inside_route.rb#248
  def content_type(val = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/inside_route.rb#467
  def context; end

  # Set or get a cookie
  #
  # @example
  #   cookies[:mycookie] = 'mycookie val'
  #   cookies['mycookie-string'] = 'mycookie string val'
  #   cookies[:more] = { value: '123', expires: Time.at(0) }
  #   cookies.delete :more
  #
  # source://grape//lib/grape/dsl/inside_route.rb#264
  def cookies; end

  # A filtering method that will return a hash
  # consisting only of keys that have been declared by a
  # `params` statement against the current/target endpoint or parent
  # namespaces.
  #
  # options. `:include_parent_namespaces` defaults to true, hence must be set to false if
  # you want only to return params declared against the current/target endpoint.
  #
  # @param params [Hash] The initial hash to filter. Usually this will just be `params`
  # @param options [Hash] Can pass `:include_missing`, `:stringify` and `:include_parent_namespaces`
  # @raise [MethodNotYetAvailable]
  # @see +PostBeforeFilter#declared+
  #
  # source://grape//lib/grape/dsl/inside_route.rb#149
  def declared(*_arg0); end

  # Attempt to locate the Entity class for a given object, if not given
  # explicitly. This is done by looking for the presence of Klass::Entity,
  # where Klass is the class of the `object` parameter, or one of its
  # ancestors.
  #
  # @option options
  # @param object [Object] the object to locate the Entity class for
  # @param options [Hash]
  # @return [Class] the located Entity class, or nil if none is found
  #
  # source://grape//lib/grape/dsl/inside_route.rb#434
  def entity_class_for_obj(object, options); end

  # @return the representation of the given object as done through
  #   the given entity_class.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#457
  def entity_representation_for(entity_class, object, options); end

  # End the request and display an error to the
  # end user with the specified message.
  #
  # @param message [String] The message to display.
  # @param status [Integer] The HTTP Status Code. Defaults to default_error_status, 500 if not set.
  # @param additional_headers [Hash] Addtional headers for the response.
  # @param backtrace [Array<String>] The backtrace of the exception that caused the error.
  # @param original_exception [Exception] The original exception that caused the error.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#170
  def error!(message, status = T.unsafe(nil), additional_headers = T.unsafe(nil), backtrace = T.unsafe(nil), original_exception = T.unsafe(nil)); end

  # Deprecated method to send files to the client. Use `sendfile` or `stream`
  #
  # source://grape//lib/grape/dsl/inside_route.rb#304
  def file(value = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/inside_route.rb#463
  def http_version; end

  # Allows you to make use of Grape Entities by setting
  # the response body to the serializable hash of the
  # entity provided in the `:with` option. This has the
  # added benefit of automatically passing along environment
  # and version information to the serialization, making it
  # very easy to do conditional exposures. See Entity docs
  # for more info.
  #
  # @example
  #
  #   get '/users/:id' do
  #   present User.find(params[:id]),
  #   with: API::Entities::User,
  #   admin: current_user.admin?
  #   end
  #
  # source://grape//lib/grape/dsl/inside_route.rb#384
  def present(*args); end

  # Creates a Rack response based on the provided message, status, and headers.
  # The content type in the headers is set to the default content type unless provided.
  # The message is HTML-escaped if the content type is 'text/html'.
  #
  # Returns:
  # A Rack::Response object containing the specified message, status, and headers.
  #
  # @param message [String] The content of the response.
  # @param status [Integer] The HTTP status code.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#188
  def rack_response(message, status = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Redirect to a new url.
  #
  # @param url [String] The url to be redirect.
  # @param options [Hash] The options used when redirect.
  #   :permanent, default false.
  #   :body, default a short message including the URL.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#200
  def redirect(url, permanent: T.unsafe(nil), body: T.unsafe(nil), **_options); end

  # Allows you to explicitly return no content.
  #
  # @example
  #   delete :id do
  #   return_no_content
  #   "not returned"
  #   end
  #
  #   DELETE /12 # => 204 No Content, ""
  #
  # source://grape//lib/grape/dsl/inside_route.rb#298
  def return_no_content; end

  # Returns route information for the current request.
  #
  # @example
  #
  #   desc "Returns the route description."
  #   get '/' do
  #   route.description
  #   end
  #
  # source://grape//lib/grape/dsl/inside_route.rb#422
  def route; end

  # Allows you to send a file to the client via sendfile.
  #
  # @example
  #   get '/file' do
  #   sendfile FileStreamer.new(...)
  #   end
  #
  #   GET /file # => "contents of file"
  #
  # source://grape//lib/grape/dsl/inside_route.rb#325
  def sendfile(value = T.unsafe(nil)); end

  # Set or retrieve the HTTP status code.
  #
  # @param status [Integer] The HTTP Status Code to return for this request.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#220
  def status(status = T.unsafe(nil)); end

  # Allows you to define the response as a streamable object.
  #
  # If Content-Length and Transfer-Encoding are blank (among other conditions),
  # Rack assumes this response can be streamed in chunks.
  #
  # See:
  # * https://github.com/rack/rack/blob/99293fa13d86cd48021630fcc4bd5acc9de5bdc3/lib/rack/chunked.rb
  # * https://github.com/rack/rack/blob/99293fa13d86cd48021630fcc4bd5acc9de5bdc3/lib/rack/etag.rb
  #
  # @example
  #   get '/stream' do
  #   stream FileStreamer.new(...)
  #   end
  #
  #   GET /stream # => "chunked contents of file"
  #
  # source://grape//lib/grape/dsl/inside_route.rb#351
  def stream(value = T.unsafe(nil)); end

  # The API version as specified in the URL.
  #
  # source://grape//lib/grape/dsl/inside_route.rb#154
  def version; end

  class << self
    # @param type [Symbol] The type of filter for which evaluation has been
    #   completed
    # @return [Module] A module containing method overrides suitable for the
    #   position in the filter evaluation sequence denoted by +type+.  This
    #   defaults to an empty module if no overrides are defined for the given
    #   filter +type+.
    #
    # source://grape//lib/grape/dsl/inside_route.rb#20
    def post_filter_methods(type); end
  end
end

# Denotes a situation where a DSL method has been invoked in a
# filter which it should not yet be available in
#
# source://grape//lib/grape/dsl/inside_route.rb#12
class Grape::DSL::InsideRoute::MethodNotYetAvailable < ::StandardError; end

# Methods which should not be available in filters until the before filter
# has completed
#
# source://grape//lib/grape/dsl/inside_route.rb#27
module Grape::DSL::InsideRoute::PostBeforeFilter
  # source://grape//lib/grape/dsl/inside_route.rb#28
  def declared(passed_params, options = T.unsafe(nil), declared_params = T.unsafe(nil), params_nested_path = T.unsafe(nil)); end

  private

  # source://grape//lib/grape/dsl/inside_route.rb#47
  def declared_array(passed_params, options, declared_params, params_nested_path); end

  # source://grape//lib/grape/dsl/inside_route.rb#53
  def declared_hash(passed_params, options, declared_params, params_nested_path); end

  # source://grape//lib/grape/dsl/inside_route.rb#61
  def declared_hash_attr(passed_params, options, declared_param, params_nested_path, memo); end

  # source://grape//lib/grape/dsl/inside_route.rb#98
  def handle_passed_param(params_nested_path, has_passed_children = T.unsafe(nil), &_block); end

  # @raise [ArgumentError]
  #
  # source://grape//lib/grape/dsl/inside_route.rb#123
  def optioned_declared_params(**options); end

  # source://grape//lib/grape/dsl/inside_route.rb#119
  def optioned_param_key(declared_param, options); end
end

# source://grape//lib/grape/dsl/logger.rb#5
module Grape::DSL::Logger
  include ::Grape::DSL::Settings

  # Set or retrive the configured logger. If none was configured, this
  # method will create a new one, logging to stdout.
  #
  # @param logger [Object] the new logger to use
  #
  # source://grape//lib/grape/dsl/logger.rb#13
  def logger(logger = T.unsafe(nil)); end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://grape//lib/grape/dsl/logger.rb#8
  def logger=(_arg0); end
end

# source://grape//lib/grape/dsl/middleware.rb#5
module Grape::DSL::Middleware
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Middleware::ClassMethods
end

# source://grape//lib/grape/dsl/middleware.rb#10
module Grape::DSL::Middleware::ClassMethods
  # source://grape//lib/grape/dsl/middleware.rb#24
  def insert(*args, &block); end

  # source://grape//lib/grape/dsl/middleware.rb#38
  def insert_after(*args, &block); end

  # source://grape//lib/grape/dsl/middleware.rb#31
  def insert_before(*args, &block); end

  # Retrieve an array of the middleware classes
  # and arguments that are currently applied to the
  # application.
  #
  # source://grape//lib/grape/dsl/middleware.rb#48
  def middleware; end

  # Apply a custom middleware to the API. Applies
  # to the current namespace and any children, but
  # not parents.
  #
  # @param middleware_class [Class] The class of the middleware you'd like
  #   to inject.
  #
  # source://grape//lib/grape/dsl/middleware.rb#17
  def use(middleware_class, *args, &block); end
end

# Defines DSL methods, meant to be applied to a ParamsScope, which define
# and describe the parameters accepted by an endpoint, or all endpoints
# within a namespace.
#
# source://grape//lib/grape/dsl/parameters.rb#8
module Grape::DSL::Parameters
  extend ::ActiveSupport::Concern

  # Require that either all given params are present, or none are.
  #
  # @param attrs [*Symbol] parameters to validate
  #
  # source://grape//lib/grape/dsl/parameters.rb#197
  def all_or_none_of(*attrs); end

  # Require at least one of the given parameters to be present.
  #
  # @param attrs [*Symbol] parameters to validate
  #
  # source://grape//lib/grape/dsl/parameters.rb#191
  def at_least_one_of(*attrs); end

  # Set the module used to build the request.params.
  #
  # @example
  #
  #   require 'grape/extenstions/hashie_mash'
  #   class API < Grape::API
  #   desc "Get collection"
  #   params do
  #   build_with Grape::Extensions::Hashie::Mash::ParamBuilder
  #   requires :user_id, type: Integer
  #   end
  #   get do
  #   params['user_id']
  #   end
  #   end
  # @param build_with the ParamBuilder module to use when building request.params
  #   Available builders are:
  #
  #   * Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder (default)
  #   * Grape::Extensions::Hash::ParamBuilder
  #   * Grape::Extensions::Hashie::Mash::ParamBuilder
  #
  # source://grape//lib/grape/dsl/parameters.rb#33
  def build_with(build_with = T.unsafe(nil)); end

  # Test for whether a certain parameter has been defined in this params
  # block yet.
  #
  # @return [Boolean] whether the parameter has been defined
  #
  # source://grape//lib/grape/dsl/parameters.rb#219
  def declared_param?(param); end

  # Require exactly one of the given parameters to be present.
  #
  # @param attrs [*Symbol] parameters to validate
  #
  # source://grape//lib/grape/dsl/parameters.rb#185
  def exactly_one_of(*attrs); end

  # Define a block of validations which should be applied if and only if
  # the given parameter is present. The parameters are not nested.
  #
  # @param attr [Symbol] the parameter which, if present, triggers the
  #   validations
  # @raise Grape::Exceptions::UnknownParameter if `attr` has not been
  #   defined in this scope yet
  # @yield a parameter definition DSL
  #
  # source://grape//lib/grape/dsl/parameters.rb#208
  def given(*attrs, &block); end

  # Require one or more parameters for the current endpoint.
  #
  # @example
  #   params do
  #   # Basic usage: require a parameter of a certain type
  #   requires :user_id, type: Integer
  #
  #   # You don't need to specify type; String is default
  #   requires :foo
  #
  #   # Multiple params can be specified at once if they share
  #   # the same options.
  #   requires :x, :y, :z, type: Date
  #
  #   # Nested parameters can be handled as hashes. You must
  #   # pass in a block, within which you can use any of the
  #   # parameters DSL methods.
  #   requires :user, type: Hash do
  #   requires :name, type: String
  #   end
  #   end
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs list of parameters names, or, if :using is
  #   passed as an option, which keys to include (:all or :none) from
  #   the :using hash. The last key can be a hash, which specifies
  #   options for the parameters
  #
  # source://grape//lib/grape/dsl/parameters.rb#128
  def group(*attrs, &block); end

  # Include reusable params rules among current.
  # You can define reusable params with helpers method.
  #
  # @example
  #   class API < Grape::API
  #   helpers do
  #   params :pagination do
  #   optional :page, type: Integer
  #   optional :per_page, type: Integer
  #   end
  #   end
  #
  #   desc "Get collection"
  #   params do
  #   use :pagination
  #   end
  #   get do
  #   Collection.page(params[:page]).per(params[:per_page])
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/parameters.rb#58
  def includes(*names); end

  # source://grape//lib/grape/dsl/parameters.rb#236
  def map_params(params, element, is_array = T.unsafe(nil)); end

  # Disallow the given parameters to be present in the same request.
  #
  # @param attrs [*Symbol] parameters to validate
  #
  # source://grape//lib/grape/dsl/parameters.rb#179
  def mutually_exclusive(*attrs); end

  # Allow, but don't require, one or more parameters for the current
  #   endpoint.
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs list of parameters names, or, if :using is
  #   passed as an option, which keys to include (:all or :none) from
  #   the :using hash. The last key can be a hash, which specifies
  #   options for the parameters
  #
  # source://grape//lib/grape/dsl/parameters.rb#147
  def optional(*attrs, &block); end

  # @api private
  # @param params [Hash] initial hash of parameters
  # @return hash of parameters relevant for the current scope
  #
  # source://grape//lib/grape/dsl/parameters.rb#253
  def params(params); end

  # Require one or more parameters for the current endpoint.
  #
  # @example
  #
  #   params do
  #   # Basic usage: require a parameter of a certain type
  #   requires :user_id, type: Integer
  #
  #   # You don't need to specify type; String is default
  #   requires :foo
  #
  #   # Multiple params can be specified at once if they share
  #   # the same options.
  #   requires :x, :y, :z, type: Date
  #
  #   # Nested parameters can be handled as hashes. You must
  #   # pass in a block, within which you can use any of the
  #   # parameters DSL methods.
  #   requires :user, type: Hash do
  #   requires :name, type: String
  #   end
  #   end
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs list of parameters names, or, if :using is
  #   passed as an option, which keys to include (:all or :none) from
  #   the :using hash. The last key can be a hash, which specifies
  #   options for the parameters
  #
  # source://grape//lib/grape/dsl/parameters.rb#128
  def requires(*attrs, &block); end

  # Include reusable params rules among current.
  # You can define reusable params with helpers method.
  #
  # @example
  #
  #   class API < Grape::API
  #   helpers do
  #   params :pagination do
  #   optional :page, type: Integer
  #   optional :per_page, type: Integer
  #   end
  #   end
  #
  #   desc "Get collection"
  #   params do
  #   use :pagination
  #   end
  #   get do
  #   Collection.page(params[:page]).per(params[:per_page])
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/parameters.rb#58
  def use(*names); end

  # Include reusable params rules among current.
  # You can define reusable params with helpers method.
  #
  # @example
  #   class API < Grape::API
  #   helpers do
  #   params :pagination do
  #   optional :page, type: Integer
  #   optional :per_page, type: Integer
  #   end
  #   end
  #
  #   desc "Get collection"
  #   params do
  #   use :pagination
  #   end
  #   get do
  #   Collection.page(params[:page]).per(params[:per_page])
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/parameters.rb#58
  def use_scope(*names); end

  # Define common settings for one or more parameters
  #
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @option attrs
  # @param attrs list of parameters names, or, if :using is
  #   passed as an option, which keys to include (:all or :none) from
  #   the :using hash. The last key can be a hash, which specifies
  #   options for the parameters
  #
  # source://grape//lib/grape/dsl/parameters.rb#172
  def with(*attrs, &block); end

  private

  # source://grape//lib/grape/dsl/parameters.rb#261
  def first_hash_key_or_param(parameter); end
end

# source://grape//lib/grape/dsl/parameters.rb#234
class Grape::DSL::Parameters::EmptyOptionalValue; end

# source://grape//lib/grape/dsl/request_response.rb#5
module Grape::DSL::RequestResponse
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::RequestResponse::ClassMethods
end

# source://grape//lib/grape/dsl/request_response.rb#10
module Grape::DSL::RequestResponse::ClassMethods
  # Specify additional content-types, e.g.:
  #   content_type :xls, 'application/vnd.ms-excel'
  #
  # source://grape//lib/grape/dsl/request_response.rb#66
  def content_type(key, val); end

  # All available content types.
  #
  # source://grape//lib/grape/dsl/request_response.rb#71
  def content_types; end

  # Specify a default error formatter.
  #
  # source://grape//lib/grape/dsl/request_response.rb#45
  def default_error_formatter(new_formatter_name = T.unsafe(nil)); end

  # Specify the default status code for errors.
  #
  # source://grape//lib/grape/dsl/request_response.rb#77
  def default_error_status(new_status = T.unsafe(nil)); end

  # Specify the default format for the API's serializers.
  # May be `:json` or `:txt` (default).
  #
  # source://grape//lib/grape/dsl/request_response.rb#13
  def default_format(new_format = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/request_response.rb#54
  def error_formatter(format, options); end

  # Specify the format for the API's serializers.
  # May be `:json`, `:xml`, `:txt`, etc.
  #
  # source://grape//lib/grape/dsl/request_response.rb#19
  def format(new_format = T.unsafe(nil)); end

  # Specify a custom formatter for a content-type.
  #
  # source://grape//lib/grape/dsl/request_response.rb#35
  def formatter(content_type, new_formatter); end

  # Specify a custom parser for a content-type.
  #
  # source://grape//lib/grape/dsl/request_response.rb#40
  def parser(content_type, new_parser); end

  # Allows you to specify a default representation entity for a
  # class. This allows you to map your models to their respective
  # entities once and then simply call `present` with the model.
  #
  # Note that Grape will automatically go up the class ancestry to
  # try to find a representing entity, so if you, for example, define
  # an entity to represent `Object` then all presented objects will
  # bubble up and utilize the entity provided on that `represent` call.
  #
  # @example
  #   class ExampleAPI < Grape::API
  #   represent User, with: Entity::User
  #
  #   get '/me' do
  #   present current_user # with: Entity::User is assumed
  #   end
  #   end
  # @option options
  # @param model_class [Class] The model class that will be represented.
  # @param options [Hash] a customizable set of options
  # @raise [Grape::Exceptions::InvalidWithOptionForRepresent]
  #
  # source://grape//lib/grape/dsl/request_response.rb#155
  def represent(model_class, options); end

  # Allows you to rescue certain exceptions that occur to return
  # a grape error rather than raising all the way to the
  # server level.
  #
  # @example Rescue from custom exceptions
  #   class ExampleAPI < Grape::API
  #   class CustomError < StandardError; end
  #
  #   rescue_from CustomError
  #   end
  # @overload rescue_from
  # @raise [ArgumentError]
  #
  # source://grape//lib/grape/dsl/request_response.rb#101
  def rescue_from(*args, &block); end

  private

  # @raise [ArgumentError]
  #
  # source://grape//lib/grape/dsl/request_response.rb#163
  def extract_with(options); end
end

# source://grape//lib/grape/dsl/routing.rb#5
module Grape::DSL::Routing
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Routing::ClassMethods
end

# source://grape//lib/grape/dsl/routing.rb#9
module Grape::DSL::Routing::ClassMethods
  # source://grape//lib/grape/dsl/routing.rb#158
  def delete(*args, &block); end

  # source://grape//lib/grape/dsl/routing.rb#80
  def do_not_document!; end

  # Do not route HEAD requests to GET requests automatically.
  #
  # source://grape//lib/grape/dsl/routing.rb#71
  def do_not_route_head!; end

  # Do not automatically route OPTIONS.
  #
  # source://grape//lib/grape/dsl/routing.rb#76
  def do_not_route_options!; end

  # Returns the value of attribute endpoints.
  #
  # source://grape//lib/grape/dsl/routing.rb#10
  def endpoints; end

  # source://grape//lib/grape/dsl/routing.rb#158
  def get(*args, &block); end

  # Declare a "namespace", which prefixes all subordinate routes with its
  # name. Any endpoints within a namespace, group, resource or segment,
  # etc., will share their parent context as well as any configuration
  # done in the namespace context.
  #
  # @example
  #   namespace :foo do
  #   get 'bar' do
  #   # defines the endpoint: GET /foo/bar
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#177
  def group(space = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://grape//lib/grape/dsl/routing.rb#158
  def head(*args, &block); end

  # source://grape//lib/grape/dsl/routing.rb#84
  def mount(mounts, *opts); end

  # Declare a "namespace", which prefixes all subordinate routes with its
  # name. Any endpoints within a namespace, group, resource or segment,
  # etc., will share their parent context as well as any configuration
  # done in the namespace context.
  #
  # @example
  #
  #   namespace :foo do
  #   get 'bar' do
  #   # defines the endpoint: GET /foo/bar
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#177
  def namespace(space = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://grape//lib/grape/dsl/routing.rb#158
  def options(*args, &block); end

  # source://grape//lib/grape/dsl/routing.rb#158
  def patch(*args, &block); end

  # source://grape//lib/grape/dsl/routing.rb#158
  def post(*args, &block); end

  # Define a root URL prefix for your entire API.
  #
  # source://grape//lib/grape/dsl/routing.rb#56
  def prefix(prefix = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/routing.rb#158
  def put(*args, &block); end

  # source://grape//lib/grape/dsl/routing.rb#210
  def reset_endpoints!; end

  # Remove all defined routes.
  #
  # source://grape//lib/grape/dsl/routing.rb#205
  def reset_routes!; end

  # Declare a "namespace", which prefixes all subordinate routes with its
  # name. Any endpoints within a namespace, group, resource or segment,
  # etc., will share their parent context as well as any configuration
  # done in the namespace context.
  #
  # @example
  #   namespace :foo do
  #   get 'bar' do
  #   # defines the endpoint: GET /foo/bar
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#177
  def resource(space = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Declare a "namespace", which prefixes all subordinate routes with its
  # name. Any endpoints within a namespace, group, resource or segment,
  # etc., will share their parent context as well as any configuration
  # done in the namespace context.
  #
  # @example
  #   namespace :foo do
  #   get 'bar' do
  #   # defines the endpoint: GET /foo/bar
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#177
  def resources(space = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Defines a route that will be recognized
  # by the Grape API.
  #
  # @example Defining a basic route.
  #   class MyAPI < Grape::API
  #   route(:any, '/hello') do
  #   {hello: 'world'}
  #   end
  #   end
  # @param methods [HTTP Verb] One or more HTTP verbs that are accepted by this route. Set to `:any` if you want any verb to be accepted.
  # @param paths [String] One or more strings representing the URL segment(s) for this route.
  #
  # source://grape//lib/grape/dsl/routing.rb#139
  def route(methods, paths = T.unsafe(nil), route_options = T.unsafe(nil), &block); end

  # This method allows you to quickly define a parameter route segment
  # in your API.
  #
  # @option options
  # @param param [Symbol] The name of the parameter you wish to declare.
  # @param options [Hash] a customizable set of options
  #
  # source://grape//lib/grape/dsl/routing.rb#219
  def route_param(param, options = T.unsafe(nil), &block); end

  # An array of API routes.
  #
  # source://grape//lib/grape/dsl/routing.rb#200
  def routes; end

  # Create a scope without affecting the URL.
  #
  # make the code more readable.
  #
  # @param _name [Symbol] Purely placebo, just allows to name the scope to
  #
  # source://grape//lib/grape/dsl/routing.rb#64
  def scope(_name = T.unsafe(nil), &block); end

  # Declare a "namespace", which prefixes all subordinate routes with its
  # name. Any endpoints within a namespace, group, resource or segment,
  # etc., will share their parent context as well as any configuration
  # done in the namespace context.
  #
  # @example
  #   namespace :foo do
  #   get 'bar' do
  #   # defines the endpoint: GET /foo/bar
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#177
  def segment(space = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Specify an API version.
  #
  # @example API with legacy support.
  #   class MyAPI < Grape::API
  #   version 'v2'
  #
  #   get '/main' do
  #   {some: 'data'}
  #   end
  #
  #   version 'v1' do
  #   get '/main' do
  #   {legacy: 'data'}
  #   end
  #   end
  #   end
  #
  # source://grape//lib/grape/dsl/routing.rb#29
  def version(*args, &block); end

  # @return array of defined versions
  #
  # source://grape//lib/grape/dsl/routing.rb#234
  def versions; end

  private

  # source://grape//lib/grape/dsl/routing.rb#240
  def refresh_mounted_api(mounts, *opts); end
end

# Keeps track of settings (implemented as key-value pairs, grouped by
# types), in two contexts: top-level settings which apply globally no
# matter where they're defined, and inheritable settings which apply only
# in the current scope and scopes nested under it.
#
# source://grape//lib/grape/dsl/settings.rb#9
module Grape::DSL::Settings
  extend ::ActiveSupport::Concern

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#123
  def api_class_setting(key, value = T.unsafe(nil)); end

  # @param type [Symbol]
  # @param key [Symbol]
  # @param value [Object] will be stored if the value is currently empty
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#36
  def get_or_set(type, key, value); end

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#48
  def global_setting(key, value = T.unsafe(nil)); end

  # Fetch our current inheritable settings, which are inherited by
  # nested scopes but not shared across siblings.
  #
  # source://grape//lib/grape/dsl/settings.rb#21
  def inheritable_setting; end

  # Sets the attribute inheritable_setting
  #
  # @param value the value to set the attribute inheritable_setting to.
  #
  # source://grape//lib/grape/dsl/settings.rb#12
  def inheritable_setting=(_arg0); end

  # Set the inheritable settings pointer back up by one level.
  #
  # source://grape//lib/grape/dsl/settings.rb#140
  def namespace_end; end

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#78
  def namespace_inheritable(key, value = T.unsafe(nil)); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#88
  def namespace_inheritable_to_nil(key); end

  # source://grape//lib/grape/dsl/settings.rb#97
  def namespace_reverse_stackable(key, value = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/settings.rb#108
  def namespace_reverse_stackable_with_hash(key); end

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#68
  def namespace_setting(key, value = T.unsafe(nil)); end

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#93
  def namespace_stackable(key, value = T.unsafe(nil)); end

  # source://grape//lib/grape/dsl/settings.rb#101
  def namespace_stackable_with_hash(key); end

  # Fork our inheritable settings to a new instance, copied from our
  # parent's, but separate so we won't modify it. Every call to this
  # method should have an answering call to #namespace_end.
  #
  # source://grape//lib/grape/dsl/settings.rb#135
  def namespace_start; end

  # Stop defining settings for the current route and clear them for the
  # next, within a namespace.
  #
  # source://grape//lib/grape/dsl/settings.rb#147
  def route_end; end

  # @param key [Symbol]
  # @param value [Object]
  # @return either the old value, if it wasn't nil, or the given value
  #
  # source://grape//lib/grape/dsl/settings.rb#58
  def route_setting(key, value = T.unsafe(nil)); end

  # Fetch our top-level settings, which apply to all endpoints in the API.
  #
  # source://grape//lib/grape/dsl/settings.rb#15
  def top_level_setting; end

  # Sets the attribute top_level_setting
  #
  # @param value the value to set the attribute top_level_setting to.
  #
  # source://grape//lib/grape/dsl/settings.rb#12
  def top_level_setting=(_arg0); end

  # @param type [Symbol]
  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#27
  def unset(type, key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#128
  def unset_api_class_setting(key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#53
  def unset_global_setting(key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#83
  def unset_namespace_inheritable(key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#73
  def unset_namespace_setting(key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#118
  def unset_namespace_stackable(key); end

  # @param key [Symbol]
  #
  # source://grape//lib/grape/dsl/settings.rb#63
  def unset_route_setting(key); end

  # Execute the block within a context where our inheritable settings are forked
  # to a new copy (see #namespace_start).
  #
  # source://grape//lib/grape/dsl/settings.rb#153
  def within_namespace(&block); end

  private

  # Builds the current class :inheritable_setting. If available, it inherits from
  # the superclass's :inheritable_setting.
  #
  # source://grape//lib/grape/dsl/settings.rb#168
  def build_top_level_setting; end
end

# source://grape//lib/grape/dsl/validations.rb#5
module Grape::DSL::Validations
  extend ::ActiveSupport::Concern
  include ::Grape::DSL::Configuration

  mixes_in_class_methods ::Grape::DSL::Configuration::ClassMethods
  mixes_in_class_methods ::Grape::DSL::Validations::ClassMethods
end

# source://grape//lib/grape/dsl/validations.rb#10
module Grape::DSL::Validations::ClassMethods
  # Declare the contract to be used for the endpoint's parameters.
  #
  # @param contract [Class<Dry::Validation::Contract> | Dry::Schema::Processor] The contract or schema to be used for validation. Optional.
  # @raise [ArgumentError]
  # @yield a block yielding a new instance of Dry::Schema::Params
  #   subclass, allowing to define the schema inline. When the
  #   +contract+ parameter is a schema, it will be used as a parent. Optional.
  #
  # source://grape//lib/grape/dsl/validations.rb#48
  def contract(contract = T.unsafe(nil), &block); end

  # Opens a root-level ParamsScope, defining parameter coercions and
  # validations for the endpoint.
  #
  # @yield instance context of the new scope
  #
  # source://grape//lib/grape/dsl/validations.rb#38
  def params(&block); end

  # Clears all defined parameters and validations. The main purpose of it is to clean up
  # settings, so next endpoint won't interfere with previous one.
  #
  #    params do
  #      # params for the endpoint below this block
  #    end
  #    post '/current' do
  #      # whatever
  #    end
  #
  #    # somewhere between them the reset_validations! method gets called
  #
  #    params do
  #      # params for the endpoint below this block
  #    end
  #    post '/next' do
  #      # whatever
  #    end
  #
  # source://grape//lib/grape/dsl/validations.rb#29
  def reset_validations!; end
end

# source://grape//lib/grape/dry_types.rb#4
module Grape::DryTypes
  extend ::Dry::Types::BuilderMethods
  extend ::Dry::Core::Deprecations::Interface

  mixes_in_class_methods ::Dry::Types::BuilderMethods
end

# An Endpoint is the proxy scope in which all routing
# blocks are executed. In other words, any methods
# on the instance level of this class may be called
# from inside a `get`, `post`, etc.
#
# source://grape//lib/grape/endpoint.rb#8
class Grape::Endpoint
  include ::Grape::DSL::Settings
  include ::Grape::DSL::Headers
  include ::Grape::DSL::InsideRoute

  # Create a new endpoint.
  # endpoint does not know if it will be mounted under a different endpoint.
  #
  # @note This happens at the time of API definition, so in this context the
  # @option options
  # @option options
  # @option options
  # @param new_settings [InheritableSetting] settings to determine the params,
  #   validations, and other properties from.
  # @param options [Hash] attributes of this endpoint
  # @return [Endpoint] a new instance of Endpoint
  # @yield a block defining what your API should do when this endpoint is hit
  #
  # source://grape//lib/grape/endpoint.rb#76
  def initialize(new_settings, options = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def block; end

  # Sets the attribute block
  #
  # @param value the value to set the attribute block to.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def block=(_arg0); end

  # source://grape//lib/grape/endpoint.rb#217
  def call(env); end

  # source://grape//lib/grape/endpoint.rb#222
  def call!(env); end

  # Return the collection of endpoints within this endpoint.
  # This is the case when an Grape::API mounts another Grape::API.
  #
  # source://grape//lib/grape/endpoint.rb#230
  def endpoints; end

  # Returns the value of attribute env.
  #
  # source://grape//lib/grape/endpoint.rb#13
  def env; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/endpoint.rb#234
  def equals?(endpoint); end

  # Returns the value of attribute headers.
  #
  # source://grape//lib/grape/endpoint.rb#13
  def headers; end

  # Update our settings from a given set of stackable parameters. Used when
  # the endpoint's API is mounted under another one.
  #
  # source://grape//lib/grape/endpoint.rb#116
  def inherit_settings(namespace_stackable); end

  # source://grape//lib/grape/endpoint.rb#204
  def map_routes; end

  # source://grape//lib/grape/endpoint.rb#200
  def merge_route_options(**default); end

  # source://grape//lib/grape/endpoint.rb#129
  def method_name; end

  # source://grape//lib/grape/endpoint.rb#147
  def mount_in(router); end

  # source://grape//lib/grape/endpoint.rb#213
  def namespace; end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def options=(_arg0); end

  # Returns the value of attribute params.
  #
  # source://grape//lib/grape/endpoint.rb#13
  def params; end

  # source://grape//lib/grape/endpoint.rb#180
  def prepare_default_route_attributes; end

  # source://grape//lib/grape/endpoint.rb#208
  def prepare_path(path); end

  # source://grape//lib/grape/endpoint.rb#173
  def prepare_routes_requirements; end

  # source://grape//lib/grape/endpoint.rb#192
  def prepare_version; end

  # Returns the value of attribute request.
  #
  # source://grape//lib/grape/endpoint.rb#13
  def request; end

  # @raise [Grape::Exceptions::MissingOption]
  #
  # source://grape//lib/grape/endpoint.rb#125
  def require_option(options, key); end

  # source://grape//lib/grape/endpoint.rb#141
  def reset_routes!; end

  # source://grape//lib/grape/endpoint.rb#137
  def routes; end

  # Returns the value of attribute source.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  #
  # source://grape//lib/grape/endpoint.rb#12
  def source=(_arg0); end

  # source://grape//lib/grape/endpoint.rb#163
  def to_routes; end

  protected

  # source://grape//lib/grape/endpoint.rb#383
  def after_validations; end

  # source://grape//lib/grape/endpoint.rb#387
  def afters; end

  # source://grape//lib/grape/endpoint.rb#379
  def before_validations; end

  # source://grape//lib/grape/endpoint.rb#375
  def befores; end

  # source://grape//lib/grape/endpoint.rb#328
  def execute; end

  # source://grape//lib/grape/endpoint.rb#391
  def finallies; end

  # source://grape//lib/grape/endpoint.rb#332
  def helpers; end

  # source://grape//lib/grape/endpoint.rb#408
  def inspect; end

  # source://grape//lib/grape/endpoint.rb#336
  def lazy_initialize!; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/endpoint.rb#403
  def options?; end

  # source://grape//lib/grape/endpoint.rb#240
  def run; end

  # source://grape//lib/grape/endpoint.rb#367
  def run_filters(filters, type = T.unsafe(nil)); end

  # source://grape//lib/grape/endpoint.rb#349
  def run_validators(validators, request); end

  # source://grape//lib/grape/endpoint.rb#395
  def validations; end

  private

  # source://grape//lib/grape/endpoint.rb#321
  def build_helpers; end

  # source://grape//lib/grape/endpoint.rb#280
  def build_stack(helpers); end

  class << self
    # source://grape//lib/grape/endpoint.rb#20
    def before_each(new_setup = T.unsafe(nil), &block); end

    # Create an UnboundMethod that is appropriate for executing an endpoint
    # route.
    #
    # The unbound method allows explicit calls to +return+ without raising a
    # +LocalJumpError+. The method will be removed, but a +Proc+ reference to
    # it will be returned. The returned +Proc+ expects a single argument: the
    # instance of +Endpoint+ to bind to the method during the call.
    #
    # @api private
    # @param method_name [String, Symbol]
    # @raise [NameError] an instance method with the same name already exists
    # @return [Proc]
    #
    # source://grape//lib/grape/endpoint.rb#49
    def generate_api_method(method_name, &block); end

    # source://grape//lib/grape/endpoint.rb#16
    def new(*_arg0, **_arg1, &_arg2); end

    # source://grape//lib/grape/endpoint.rb#31
    def run_before_each(endpoint); end
  end
end

# source://grape//lib/grape/env.rb#4
module Grape::Env; end

# source://grape//lib/grape/env.rb#6
Grape::Env::API_ENDPOINT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#12
Grape::Env::API_FORMAT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#8
Grape::Env::API_REQUEST_BODY = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#7
Grape::Env::API_REQUEST_INPUT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#10
Grape::Env::API_SUBTYPE = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#9
Grape::Env::API_TYPE = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#11
Grape::Env::API_VENDOR = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#5
Grape::Env::API_VERSION = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#18
Grape::Env::GRAPE_ALLOWED_METHODS = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#14
Grape::Env::GRAPE_REQUEST = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#15
Grape::Env::GRAPE_REQUEST_HEADERS = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#16
Grape::Env::GRAPE_REQUEST_PARAMS = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/env.rb#17
Grape::Env::GRAPE_ROUTING_ARGS = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/error_formatter.rb#4
module Grape::ErrorFormatter
  extend ::Grape::Util::Registrable

  class << self
    # source://grape//lib/grape/error_formatter.rb#8
    def builtin_formatters; end

    # source://grape//lib/grape/error_formatter.rb#22
    def formatter_for(api_format, **options); end

    # source://grape//lib/grape/error_formatter.rb#18
    def formatters(**options); end
  end
end

# source://grape//lib/grape/error_formatter/base.rb#5
module Grape::ErrorFormatter::Base
  # source://grape//lib/grape/error_formatter/base.rb#6
  def present(message, env); end
end

# source://grape//lib/grape/error_formatter/json.rb#5
module Grape::ErrorFormatter::Json
  extend ::Grape::ErrorFormatter::Base

  class << self
    # source://grape//lib/grape/error_formatter/json.rb#9
    def call(message, backtrace, options = T.unsafe(nil), env = T.unsafe(nil), original_exception = T.unsafe(nil)); end

    private

    # source://grape//lib/grape/error_formatter/json.rb#28
    def ensure_utf8(message); end

    # source://grape//lib/grape/error_formatter/json.rb#20
    def wrap_message(message); end
  end
end

# source://grape//lib/grape/error_formatter/txt.rb#5
module Grape::ErrorFormatter::Txt
  extend ::Grape::ErrorFormatter::Base

  class << self
    # source://grape//lib/grape/error_formatter/txt.rb#9
    def call(message, backtrace, options = T.unsafe(nil), env = T.unsafe(nil), original_exception = T.unsafe(nil)); end
  end
end

# source://grape//lib/grape/error_formatter/xml.rb#5
module Grape::ErrorFormatter::Xml
  extend ::Grape::ErrorFormatter::Base

  class << self
    # source://grape//lib/grape/error_formatter/xml.rb#9
    def call(message, backtrace, options = T.unsafe(nil), env = T.unsafe(nil), original_exception = T.unsafe(nil)); end
  end
end

# source://grape//lib/grape.rb#0
module Grape::Exceptions; end

# source://grape//lib/grape/exceptions/base.rb#5
class Grape::Exceptions::Base < ::StandardError
  # @return [Base] a new instance of Base
  #
  # source://grape//lib/grape/exceptions/base.rb#12
  def initialize(status: T.unsafe(nil), message: T.unsafe(nil), headers: T.unsafe(nil), **_options); end

  # source://grape//lib/grape/exceptions/base.rb#19
  def [](index); end

  # Returns the value of attribute headers.
  #
  # source://grape//lib/grape/exceptions/base.rb#10
  def headers; end

  # Returns the value of attribute status.
  #
  # source://grape//lib/grape/exceptions/base.rb#10
  def status; end

  protected

  # TODO: translate attribute first
  # if BASE_ATTRIBUTES_KEY.key respond to a string message, then short_message is returned
  # if BASE_ATTRIBUTES_KEY.key respond to a Hash, means it may have problem , summary and resolution
  #
  # source://grape//lib/grape/exceptions/base.rb#28
  def compose_message(key, **attributes); end

  # source://grape//lib/grape/exceptions/base.rb#79
  def fallback_message(key, **options); end

  # source://grape//lib/grape/exceptions/base.rb#43
  def problem(key, **attributes); end

  # source://grape//lib/grape/exceptions/base.rb#51
  def resolution(key, **attributes); end

  # source://grape//lib/grape/exceptions/base.rb#47
  def summary(key, **attributes); end

  # source://grape//lib/grape/exceptions/base.rb#72
  def translate(key, **options); end

  # source://grape//lib/grape/exceptions/base.rb#55
  def translate_attributes(keys, **options); end

  # source://grape//lib/grape/exceptions/base.rb#61
  def translate_message(key, **options); end
end

# source://grape//lib/grape/exceptions/base.rb#7
Grape::Exceptions::Base::BASE_ATTRIBUTES_KEY = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/exceptions/base.rb#6
Grape::Exceptions::Base::BASE_MESSAGES_KEY = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/exceptions/base.rb#8
Grape::Exceptions::Base::FALLBACK_LOCALE = T.let(T.unsafe(nil), Symbol)

# source://grape//lib/grape/exceptions/empty_message_body.rb#5
class Grape::Exceptions::EmptyMessageBody < ::Grape::Exceptions::Base
  # @return [EmptyMessageBody] a new instance of EmptyMessageBody
  #
  # source://grape//lib/grape/exceptions/empty_message_body.rb#6
  def initialize(body_format); end
end

# source://grape//lib/grape/exceptions/incompatible_option_values.rb#5
class Grape::Exceptions::IncompatibleOptionValues < ::Grape::Exceptions::Base
  # @return [IncompatibleOptionValues] a new instance of IncompatibleOptionValues
  #
  # source://grape//lib/grape/exceptions/incompatible_option_values.rb#6
  def initialize(option1, value1, option2, value2); end
end

# source://grape//lib/grape/exceptions/invalid_accept_header.rb#5
class Grape::Exceptions::InvalidAcceptHeader < ::Grape::Exceptions::Base
  # @return [InvalidAcceptHeader] a new instance of InvalidAcceptHeader
  #
  # source://grape//lib/grape/exceptions/invalid_accept_header.rb#6
  def initialize(message, headers); end
end

# source://grape//lib/grape/exceptions/invalid_formatter.rb#5
class Grape::Exceptions::InvalidFormatter < ::Grape::Exceptions::Base
  # @return [InvalidFormatter] a new instance of InvalidFormatter
  #
  # source://grape//lib/grape/exceptions/invalid_formatter.rb#6
  def initialize(klass, to_format); end
end

# source://grape//lib/grape/exceptions/invalid_message_body.rb#5
class Grape::Exceptions::InvalidMessageBody < ::Grape::Exceptions::Base
  # @return [InvalidMessageBody] a new instance of InvalidMessageBody
  #
  # source://grape//lib/grape/exceptions/invalid_message_body.rb#6
  def initialize(body_format); end
end

# source://grape//lib/grape/exceptions/invalid_response.rb#5
class Grape::Exceptions::InvalidResponse < ::Grape::Exceptions::Base
  # @return [InvalidResponse] a new instance of InvalidResponse
  #
  # source://grape//lib/grape/exceptions/invalid_response.rb#6
  def initialize; end
end

# source://grape//lib/grape/exceptions/invalid_version_header.rb#5
class Grape::Exceptions::InvalidVersionHeader < ::Grape::Exceptions::Base
  # @return [InvalidVersionHeader] a new instance of InvalidVersionHeader
  #
  # source://grape//lib/grape/exceptions/invalid_version_header.rb#6
  def initialize(message, headers); end
end

# source://grape//lib/grape/exceptions/invalid_versioner_option.rb#5
class Grape::Exceptions::InvalidVersionerOption < ::Grape::Exceptions::Base
  # @return [InvalidVersionerOption] a new instance of InvalidVersionerOption
  #
  # source://grape//lib/grape/exceptions/invalid_versioner_option.rb#6
  def initialize(strategy); end
end

# source://grape//lib/grape/exceptions/invalid_with_option_for_represent.rb#5
class Grape::Exceptions::InvalidWithOptionForRepresent < ::Grape::Exceptions::Base
  # @return [InvalidWithOptionForRepresent] a new instance of InvalidWithOptionForRepresent
  #
  # source://grape//lib/grape/exceptions/invalid_with_option_for_represent.rb#6
  def initialize; end
end

# source://grape//lib/grape/exceptions/method_not_allowed.rb#5
class Grape::Exceptions::MethodNotAllowed < ::Grape::Exceptions::Base
  # @return [MethodNotAllowed] a new instance of MethodNotAllowed
  #
  # source://grape//lib/grape/exceptions/method_not_allowed.rb#6
  def initialize(headers); end
end

# source://grape//lib/grape/exceptions/missing_group_type.rb#5
class Grape::Exceptions::MissingGroupType < ::Grape::Exceptions::Base
  # @return [MissingGroupType] a new instance of MissingGroupType
  #
  # source://grape//lib/grape/exceptions/missing_group_type.rb#6
  def initialize; end
end

# source://grape//lib/grape/exceptions/missing_group_type.rb#13
Grape::Exceptions::MissingGroupTypeError = Grape::Exceptions::MissingGroupType

# source://grape//lib/grape/exceptions/missing_mime_type.rb#5
class Grape::Exceptions::MissingMimeType < ::Grape::Exceptions::Base
  # @return [MissingMimeType] a new instance of MissingMimeType
  #
  # source://grape//lib/grape/exceptions/missing_mime_type.rb#6
  def initialize(new_format); end
end

# source://grape//lib/grape/exceptions/missing_option.rb#5
class Grape::Exceptions::MissingOption < ::Grape::Exceptions::Base
  # @return [MissingOption] a new instance of MissingOption
  #
  # source://grape//lib/grape/exceptions/missing_option.rb#6
  def initialize(option); end
end

# source://grape//lib/grape/exceptions/missing_vendor_option.rb#5
class Grape::Exceptions::MissingVendorOption < ::Grape::Exceptions::Base
  # @return [MissingVendorOption] a new instance of MissingVendorOption
  #
  # source://grape//lib/grape/exceptions/missing_vendor_option.rb#6
  def initialize; end
end

# source://grape//lib/grape/exceptions/too_many_multipart_files.rb#5
class Grape::Exceptions::TooManyMultipartFiles < ::Grape::Exceptions::Base
  # @return [TooManyMultipartFiles] a new instance of TooManyMultipartFiles
  #
  # source://grape//lib/grape/exceptions/too_many_multipart_files.rb#6
  def initialize(limit); end
end

# source://grape//lib/grape/exceptions/unknown_options.rb#5
class Grape::Exceptions::UnknownOptions < ::Grape::Exceptions::Base
  # @return [UnknownOptions] a new instance of UnknownOptions
  #
  # source://grape//lib/grape/exceptions/unknown_options.rb#6
  def initialize(options); end
end

# source://grape//lib/grape/exceptions/unknown_parameter.rb#5
class Grape::Exceptions::UnknownParameter < ::Grape::Exceptions::Base
  # @return [UnknownParameter] a new instance of UnknownParameter
  #
  # source://grape//lib/grape/exceptions/unknown_parameter.rb#6
  def initialize(param); end
end

# source://grape//lib/grape/exceptions/unknown_validator.rb#5
class Grape::Exceptions::UnknownValidator < ::Grape::Exceptions::Base
  # @return [UnknownValidator] a new instance of UnknownValidator
  #
  # source://grape//lib/grape/exceptions/unknown_validator.rb#6
  def initialize(validator_type); end
end

# source://grape//lib/grape/exceptions/unsupported_group_type.rb#5
class Grape::Exceptions::UnsupportedGroupType < ::Grape::Exceptions::Base
  # @return [UnsupportedGroupType] a new instance of UnsupportedGroupType
  #
  # source://grape//lib/grape/exceptions/unsupported_group_type.rb#6
  def initialize; end
end

# source://grape//lib/grape/exceptions/unsupported_group_type.rb#13
Grape::Exceptions::UnsupportedGroupTypeError = Grape::Exceptions::UnsupportedGroupType

# source://grape//lib/grape/exceptions/validation.rb#5
class Grape::Exceptions::Validation < ::Grape::Exceptions::Base
  # @return [Validation] a new instance of Validation
  #
  # source://grape//lib/grape/exceptions/validation.rb#8
  def initialize(params:, message: T.unsafe(nil), **args); end

  # Remove all the unnecessary stuff from Grape::Exceptions::Base like status
  # and headers when converting a validation error to json or string
  #
  # source://grape//lib/grape/exceptions/validation.rb#19
  def as_json(*_args); end

  # Returns the value of attribute message_key.
  #
  # source://grape//lib/grape/exceptions/validation.rb#6
  def message_key; end

  # Sets the attribute message_key
  #
  # @param value the value to set the attribute message_key to.
  #
  # source://grape//lib/grape/exceptions/validation.rb#6
  def message_key=(_arg0); end

  # Returns the value of attribute params.
  #
  # source://grape//lib/grape/exceptions/validation.rb#6
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://grape//lib/grape/exceptions/validation.rb#6
  def params=(_arg0); end
end

# source://grape//lib/grape/exceptions/validation_array_errors.rb#5
class Grape::Exceptions::ValidationArrayErrors < ::Grape::Exceptions::Base
  # @return [ValidationArrayErrors] a new instance of ValidationArrayErrors
  #
  # source://grape//lib/grape/exceptions/validation_array_errors.rb#8
  def initialize(errors); end

  # Returns the value of attribute errors.
  #
  # source://grape//lib/grape/exceptions/validation_array_errors.rb#6
  def errors; end
end

# source://grape//lib/grape/exceptions/validation_errors.rb#5
class Grape::Exceptions::ValidationErrors < ::Grape::Exceptions::Base
  include ::Enumerable

  # @return [ValidationErrors] a new instance of ValidationErrors
  #
  # source://grape//lib/grape/exceptions/validation_errors.rb#13
  def initialize(errors: T.unsafe(nil), headers: T.unsafe(nil), **_options); end

  # source://grape//lib/grape/exceptions/validation_errors.rb#26
  def as_json(**_opts); end

  # source://grape//lib/grape/exceptions/validation_errors.rb#18
  def each; end

  # Returns the value of attribute errors.
  #
  # source://grape//lib/grape/exceptions/validation_errors.rb#11
  def errors; end

  # source://grape//lib/grape/exceptions/validation_errors.rb#39
  def full_messages; end

  # source://grape//lib/grape/exceptions/validation_errors.rb#35
  def to_json(*_opts); end
end

# source://grape//lib/grape/exceptions/validation_errors.rb#7
Grape::Exceptions::ValidationErrors::DEFAULT_ERRORS_FORMAT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/exceptions/validation_errors.rb#6
Grape::Exceptions::ValidationErrors::ERRORS_FORMAT_KEY = T.let(T.unsafe(nil), String)

# source://grape//lib/grape.rb#0
module Grape::Extensions; end

# source://grape//lib/grape.rb#0
module Grape::Extensions::ActiveSupport; end

# source://grape//lib/grape/extensions/active_support/hash_with_indifferent_access.rb#6
module Grape::Extensions::ActiveSupport::HashWithIndifferentAccess; end

# source://grape//lib/grape/extensions/active_support/hash_with_indifferent_access.rb#7
module Grape::Extensions::ActiveSupport::HashWithIndifferentAccess::ParamBuilder
  extend ::ActiveSupport::Concern

  # source://grape//lib/grape/extensions/active_support/hash_with_indifferent_access.rb#18
  def build_params; end

  # source://grape//lib/grape/extensions/active_support/hash_with_indifferent_access.rb#14
  def params_builder; end
end

# source://grape//lib/grape/extensions/hash.rb#5
module Grape::Extensions::Hash; end

# source://grape//lib/grape/extensions/hash.rb#6
module Grape::Extensions::Hash::ParamBuilder
  extend ::ActiveSupport::Concern

  # source://grape//lib/grape/extensions/hash.rb#13
  def build_params; end
end

# source://grape//lib/grape.rb#0
module Grape::Extensions::Hashie; end

# source://grape//lib/grape/extensions/hashie/mash.rb#6
module Grape::Extensions::Hashie::Mash; end

# source://grape//lib/grape/extensions/hashie/mash.rb#7
module Grape::Extensions::Hashie::Mash::ParamBuilder
  extend ::ActiveSupport::Concern

  # source://grape//lib/grape/extensions/hashie/mash.rb#17
  def build_params; end

  # source://grape//lib/grape/extensions/hashie/mash.rb#13
  def params_builder; end
end

# source://grape//lib/grape/formatter.rb#4
module Grape::Formatter
  extend ::Grape::Util::Registrable

  class << self
    # source://grape//lib/grape/formatter.rb#8
    def builtin_formatters; end

    # source://grape//lib/grape/formatter.rb#22
    def formatter_for(api_format, **options); end

    # source://grape//lib/grape/formatter.rb#18
    def formatters(**options); end
  end
end

# source://grape//lib/grape/formatter/json.rb#5
module Grape::Formatter::Json
  class << self
    # source://grape//lib/grape/formatter/json.rb#7
    def call(object, _env); end
  end
end

# source://grape//lib/grape/formatter/serializable_hash.rb#5
module Grape::Formatter::SerializableHash
  class << self
    # source://grape//lib/grape/formatter/serializable_hash.rb#7
    def call(object, _env); end

    private

    # @return [Boolean]
    #
    # source://grape//lib/grape/formatter/serializable_hash.rb#33
    def array_serializable?(object); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/formatter/serializable_hash.rb#17
    def serializable?(object); end

    # source://grape//lib/grape/formatter/serializable_hash.rb#21
    def serialize(object); end
  end
end

# source://grape//lib/grape/formatter/txt.rb#5
module Grape::Formatter::Txt
  class << self
    # source://grape//lib/grape/formatter/txt.rb#7
    def call(object, _env); end
  end
end

# source://grape//lib/grape/formatter/xml.rb#5
module Grape::Formatter::Xml
  class << self
    # @raise [Grape::Exceptions::InvalidFormatter]
    #
    # source://grape//lib/grape/formatter/xml.rb#7
    def call(object, _env); end
  end
end

# source://grape//lib/grape/dsl/routing.rb#0
module Grape::Http; end

# source://grape//lib/grape/http/headers.rb#5
module Grape::Http::Headers
  class << self
    # source://grape//lib/grape/http/headers.rb#50
    def find_supported_method(route_method); end
  end
end

# source://grape//lib/grape/http/headers.rb#10
Grape::Http::Headers::ALLOW = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#7
Grape::Http::Headers::HTTP_ACCEPT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#6
Grape::Http::Headers::HTTP_ACCEPT_VERSION = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#27
Grape::Http::Headers::HTTP_HEADERS = T.let(T.unsafe(nil), Grape::Util::Lazy::Object)

# source://grape//lib/grape/http/headers.rb#8
Grape::Http::Headers::HTTP_TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#11
Grape::Http::Headers::LOCATION = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#15
Grape::Http::Headers::SUPPORTED_METHODS = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/http/headers.rb#25
Grape::Http::Headers::SUPPORTED_METHODS_WITHOUT_OPTIONS = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/http/headers.rb#13
Grape::Http::Headers::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/http/headers.rb#12
Grape::Http::Headers::X_CASCADE = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/json.rb#5
Grape::Json = MultiJson

# source://grape//lib/grape/dsl/api.rb#0
module Grape::Middleware; end

# source://grape//lib/grape/dsl/api.rb#0
module Grape::Middleware::Auth; end

# source://grape//lib/grape/middleware/auth/base.rb#6
class Grape::Middleware::Auth::Base
  include ::Grape::Middleware::Helpers

  # @return [Base] a new instance of Base
  #
  # source://grape//lib/grape/middleware/auth/base.rb#11
  def initialize(app, *options); end

  # source://grape//lib/grape/middleware/auth/base.rb#20
  def _call(env); end

  # Returns the value of attribute app.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def app; end

  # Sets the attribute app
  #
  # @param value the value to set the attribute app to.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def app=(_arg0); end

  # source://grape//lib/grape/middleware/auth/base.rb#16
  def call(env); end

  # Returns the value of attribute env.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def env; end

  # Sets the attribute env
  #
  # @param value the value to set the attribute env to.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def env=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://grape//lib/grape/middleware/auth/base.rb#9
  def options=(_arg0); end
end

# source://grape//lib/grape/middleware/auth/dsl.rb#6
module Grape::Middleware::Auth::DSL
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Grape::Middleware::Auth::DSL::ClassMethods
end

# source://grape//lib/grape/middleware/auth/dsl.rb#9
module Grape::Middleware::Auth::DSL::ClassMethods
  # Add an authentication type to the API. Currently
  # only `:http_basic`, `:http_digest` are supported.
  #
  # source://grape//lib/grape/middleware/auth/dsl.rb#12
  def auth(type = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Add HTTP Basic authorization to the API.
  #
  # @option options
  # @param options [Hash] A hash of options.
  #
  # source://grape//lib/grape/middleware/auth/dsl.rb#25
  def http_basic(options = T.unsafe(nil), &block); end

  # source://grape//lib/grape/middleware/auth/dsl.rb#30
  def http_digest(options = T.unsafe(nil), &block); end
end

# source://grape//lib/grape/middleware/auth/strategies.rb#6
module Grape::Middleware::Auth::Strategies
  private

  # source://grape//lib/grape/middleware/auth/strategies.rb#19
  def [](label); end

  # source://grape//lib/grape/middleware/auth/strategies.rb#9
  def add(label, strategy, option_fetcher = T.unsafe(nil)); end

  # source://grape//lib/grape/middleware/auth/strategies.rb#13
  def auth_strategies; end

  class << self
    # source://grape//lib/grape/middleware/auth/strategies.rb#19
    def [](label); end

    # source://grape//lib/grape/middleware/auth/strategies.rb#9
    def add(label, strategy, option_fetcher = T.unsafe(nil)); end

    # source://grape//lib/grape/middleware/auth/strategies.rb#13
    def auth_strategies; end
  end
end

# source://grape//lib/grape/middleware/auth/strategy_info.rb#6
class Grape::Middleware::Auth::StrategyInfo < ::Struct
  # Returns the value of attribute auth_class
  #
  # @return [Object] the current value of auth_class
  def auth_class; end

  # Sets the attribute auth_class
  #
  # @param value [Object] the value to set the attribute auth_class to.
  # @return [Object] the newly set value
  def auth_class=(_); end

  # source://grape//lib/grape/middleware/auth/strategy_info.rb#7
  def create(app, options, &block); end

  # Returns the value of attribute settings_fetcher
  #
  # @return [Object] the current value of settings_fetcher
  def settings_fetcher; end

  # Sets the attribute settings_fetcher
  #
  # @param value [Object] the value to set the attribute settings_fetcher to.
  # @return [Object] the newly set value
  def settings_fetcher=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://grape//lib/grape/middleware/base.rb#5
class Grape::Middleware::Base
  include ::Grape::Middleware::Helpers
  include ::Grape::DSL::Headers

  # @param app [Rack Application] The standard argument for a Rack middleware.
  # @param options [Hash] A hash of options, simply stored for use by subclasses.
  # @return [Base] a new instance of Base
  #
  # source://grape//lib/grape/middleware/base.rb#16
  def initialize(app, *options); end

  # Called after the application is called in the middleware lifecycle.
  #
  # @abstract
  # @return [Response, nil] a Rack SPEC response or nil to call the application afterwards.
  #
  # source://grape//lib/grape/middleware/base.rb#56
  def after; end

  # Returns the value of attribute app.
  #
  # source://grape//lib/grape/middleware/base.rb#8
  def app; end

  # Called before the application is called in the middleware lifecycle.
  #
  # @abstract
  #
  # source://grape//lib/grape/middleware/base.rb#51
  def before; end

  # source://grape//lib/grape/middleware/base.rb#26
  def call(env); end

  # source://grape//lib/grape/middleware/base.rb#30
  def call!(env); end

  # source://grape//lib/grape/middleware/base.rb#72
  def content_type; end

  # source://grape//lib/grape/middleware/base.rb#64
  def content_type_for(format); end

  # source://grape//lib/grape/middleware/base.rb#68
  def content_types; end

  # source://grape//lib/grape/middleware/base.rb#22
  def default_options; end

  # Returns the value of attribute env.
  #
  # source://grape//lib/grape/middleware/base.rb#8
  def env; end

  # source://grape//lib/grape/middleware/base.rb#76
  def mime_types; end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/middleware/base.rb#8
  def options; end

  # source://grape//lib/grape/middleware/base.rb#58
  def response; end

  private

  # source://grape//lib/grape/middleware/base.rb#84
  def merge_headers(response); end
end

# source://grape//lib/grape/middleware/base.rb#10
Grape::Middleware::Base::TEXT_HTML = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/middleware/error.rb#5
class Grape::Middleware::Error < ::Grape::Middleware::Base
  # @return [Error] a new instance of Error
  #
  # source://grape//lib/grape/middleware/error.rb#27
  def initialize(app, *options); end

  # source://grape//lib/grape/middleware/error.rb#32
  def call!(env); end

  # source://grape//lib/grape/middleware/error.rb#6
  def default_options; end

  private

  # source://grape//lib/grape/middleware/error.rb#77
  def default_rescue_handler(exception); end

  # source://grape//lib/grape/middleware/error.rb#132
  def error!(message, status = T.unsafe(nil), headers = T.unsafe(nil), backtrace = T.unsafe(nil), original_exception = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/middleware/error.rb#139
  def error?(response); end

  # source://grape//lib/grape/middleware/error.rb#66
  def error_response(error = T.unsafe(nil)); end

  # source://grape//lib/grape/middleware/error.rb#58
  def find_handler(klass); end

  # source://grape//lib/grape/middleware/error.rb#46
  def format_message(message, backtrace, original_exception = T.unsafe(nil)); end

  # source://grape//lib/grape/middleware/error.rb#41
  def rack_response(status, headers, message); end

  # source://grape//lib/grape/middleware/error.rb#105
  def rescue_handler_for_any_class(klass); end

  # source://grape//lib/grape/middleware/error.rb#81
  def rescue_handler_for_base_only_class(klass); end

  # source://grape//lib/grape/middleware/error.rb#89
  def rescue_handler_for_class_or_its_ancestor(klass); end

  # source://grape//lib/grape/middleware/error.rb#97
  def rescue_handler_for_grape_exception(klass); end

  # source://grape//lib/grape/middleware/error.rb#112
  def run_rescue_handler(handler, error, endpoint); end
end

# This is a simple middleware for adding before and after filters
# to Grape APIs. It is used like so:
#
#     use Grape::Middleware::Filter, before: -> { do_something }, after: -> { do_something }
#
# source://grape//lib/grape/middleware/filter.rb#9
class Grape::Middleware::Filter < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/filter.rb#14
  def after; end

  # source://grape//lib/grape/middleware/filter.rb#10
  def before; end
end

# source://grape//lib/grape/middleware/formatter.rb#5
class Grape::Middleware::Formatter < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/formatter.rb#22
  def after; end

  # source://grape//lib/grape/middleware/formatter.rb#17
  def before; end

  # source://grape//lib/grape/middleware/formatter.rb#9
  def default_options; end

  private

  # source://grape//lib/grape/middleware/formatter.rb#36
  def build_formatted_response(status, headers, bodies); end

  # Set the content type header for the API format if it is not already present.
  #
  # @param headers [Hash]
  # @return [Hash]
  #
  # source://grape//lib/grape/middleware/formatter.rb#64
  def ensure_content_type(headers); end

  # source://grape//lib/grape/middleware/formatter.rb#55
  def fetch_formatter(headers, options); end

  # source://grape//lib/grape/middleware/formatter.rb#131
  def format_from_extension; end

  # source://grape//lib/grape/middleware/formatter.rb#150
  def format_from_header; end

  # source://grape//lib/grape/middleware/formatter.rb#142
  def format_from_params; end

  # source://grape//lib/grape/middleware/formatter.rb#157
  def mime_array; end

  # source://grape//lib/grape/middleware/formatter.rb#122
  def negotiate_content_type; end

  # store read input in env['api.request.input']
  #
  # source://grape//lib/grape/middleware/formatter.rb#77
  def read_body_input; end

  # store parsed input in env['api.request.body']
  #
  # source://grape//lib/grape/middleware/formatter.rb#96
  def read_rack_input(body); end

  # source://grape//lib/grape/middleware/formatter.rb#72
  def request; end

  # source://grape//lib/grape/middleware/formatter.rb#177
  def rewind_input(input); end
end

# source://grape//lib/grape/middleware/formatter.rb#6
Grape::Middleware::Formatter::CHUNKED = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/middleware/formatter.rb#7
Grape::Middleware::Formatter::FORMAT = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/middleware/globals.rb#5
class Grape::Middleware::Globals < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/globals.rb#6
  def before; end
end

# Common methods for all types of Grape middleware
#
# source://grape//lib/grape/middleware/helpers.rb#6
module Grape::Middleware::Helpers
  # source://grape//lib/grape/middleware/helpers.rb#7
  def context; end
end

# Class to handle the stack of middlewares based on ActionDispatch::MiddlewareStack
# It allows to insert and insert after
#
# source://grape//lib/grape/middleware/stack.rb#7
class Grape::Middleware::Stack
  include ::Enumerable

  # @return [Stack] a new instance of Stack
  #
  # source://grape//lib/grape/middleware/stack.rb#43
  def initialize; end

  # source://grape//lib/grape/middleware/stack.rb#60
  def [](index); end

  # @return [Rack::Builder] the builder object with our middlewares applied
  #
  # source://grape//lib/grape/middleware/stack.rb#96
  def build(builder = T.unsafe(nil)); end

  # @param other_specs [Array] An array of middleware specifications (e.g. [[:use, klass], [:insert_before, *args]])
  #
  # source://grape//lib/grape/middleware/stack.rb#106
  def concat(other_specs); end

  # source://grape//lib/grape/middleware/stack.rb#48
  def each(&block); end

  # source://grape//lib/grape/middleware/stack.rb#64
  def insert(index, *args, **_arg2, &block); end

  # source://grape//lib/grape/middleware/stack.rb#73
  def insert_after(index, *args, **_arg2, &block); end

  # source://grape//lib/grape/middleware/stack.rb#64
  def insert_before(index, *args, **_arg2, &block); end

  # source://grape//lib/grape/middleware/stack.rb#56
  def last; end

  # source://grape//lib/grape/middleware/stack.rb#84
  def merge_with(middleware_specs); end

  # Returns the value of attribute middlewares.
  #
  # source://grape//lib/grape/middleware/stack.rb#41
  def middlewares; end

  # Sets the attribute middlewares
  #
  # @param value the value to set the attribute middlewares to.
  #
  # source://grape//lib/grape/middleware/stack.rb#41
  def middlewares=(_arg0); end

  # Returns the value of attribute others.
  #
  # source://grape//lib/grape/middleware/stack.rb#41
  def others; end

  # Sets the attribute others
  #
  # @param value the value to set the attribute others to.
  #
  # source://grape//lib/grape/middleware/stack.rb#41
  def others=(_arg0); end

  # source://grape//lib/grape/middleware/stack.rb#52
  def size; end

  # source://grape//lib/grape/middleware/stack.rb#79
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # source://grape//lib/grape/middleware/stack.rb#113
  def assert_index(index, where); end
end

# source://grape//lib/grape/middleware/stack.rb#8
class Grape::Middleware::Stack::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://grape//lib/grape/middleware/stack.rb#11
  def initialize(klass, *args, &block); end

  # source://grape//lib/grape/middleware/stack.rb#21
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://grape//lib/grape/middleware/stack.rb#9
  def args; end

  # Returns the value of attribute block.
  #
  # source://grape//lib/grape/middleware/stack.rb#9
  def block; end

  # source://grape//lib/grape/middleware/stack.rb#30
  def inspect; end

  # Returns the value of attribute klass.
  #
  # source://grape//lib/grape/middleware/stack.rb#9
  def klass; end

  # source://grape//lib/grape/middleware/stack.rb#17
  def name; end

  # source://grape//lib/grape/middleware/stack.rb#34
  def use_in(builder); end
end

# source://grape//lib/grape/middleware/versioner.rb#13
module Grape::Middleware::Versioner
  private

  # @param strategy [Symbol] :path, :header or :param
  # @return a middleware class based on strategy
  #
  # source://grape//lib/grape/middleware/versioner.rb#18
  def using(strategy); end

  class << self
    # @param strategy [Symbol] :path, :header or :param
    # @return a middleware class based on strategy
    #
    # source://grape//lib/grape/middleware/versioner.rb#18
    def using(strategy); end
  end
end

# This middleware sets various version related rack environment variables
# based on the HTTP Accept-Version header
#
# Example: For request header
#    Accept-Version: v1
#
# The following rack env variables are set:
#
#    env['api.version']  => 'v1'
#
# If version does not match this route, then a 406 is raised with
# X-Cascade header to alert Grape::Router to attempt the next matched
# route.
#
# source://grape//lib/grape/middleware/versioner/accept_version_header.rb#19
class Grape::Middleware::Versioner::AcceptVersionHeader < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/versioner/accept_version_header.rb#20
  def before; end

  private

  # By default those errors contain an `X-Cascade` header set to `pass`, which allows nesting and stacking
  # of routes (see Grape::Router) for more information). To prevent
  # this behavior, and not add the `X-Cascade` header, one can set the `:cascade` option to `false`.
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/middleware/versioner/accept_version_header.rb#49
  def cascade?; end

  # source://grape//lib/grape/middleware/versioner/accept_version_header.rb#57
  def error_headers; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/middleware/versioner/accept_version_header.rb#42
  def strict?; end

  # source://grape//lib/grape/middleware/versioner/accept_version_header.rb#38
  def versions; end
end

# This middleware sets various version related rack environment variables
# based on the HTTP Accept header with the pattern:
# application/vnd.:vendor-:version+:format
#
# Example: For request header
#    Accept: application/vnd.mycompany.a-cool-resource-v1+json
#
# The following rack env variables are set:
#
#    env['api.type']    => 'application'
#    env['api.subtype'] => 'vnd.mycompany.a-cool-resource-v1+json'
#    env['api.vendor]   => 'mycompany.a-cool-resource'
#    env['api.version]  => 'v1'
#    env['api.format]   => 'json'
#
# If version does not match this route, then a 406 is raised with
# X-Cascade header to alert Grape::Router to attempt the next matched
# route.
#
# source://grape//lib/grape/middleware/versioner/header.rb#24
class Grape::Middleware::Versioner::Header < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/versioner/header.rb#25
  def before; end
end

# This middleware sets various version related rack environment variables
# based on the request parameters and removes that parameter from the
# request parameters for subsequent middleware and API.
# If the version substring does not match any potential initialized
# versions, a 404 error is thrown.
# If the version substring is not passed the version (highest mounted)
# version will be used.
#
# Example: For a uri path
#   /resource?apiver=v1
#
# The following rack env variables are set and path is rewritten to
# '/resource':
#
#   env['api.version'] => 'v1'
#
# source://grape//lib/grape/middleware/versioner/param.rb#21
class Grape::Middleware::Versioner::Param < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/versioner/param.rb#30
  def before; end

  # source://grape//lib/grape/middleware/versioner/param.rb#22
  def default_options; end

  private

  # source://grape//lib/grape/middleware/versioner/param.rb#41
  def paramkey; end

  # source://grape//lib/grape/middleware/versioner/param.rb#45
  def version_options; end
end

# This middleware sets various version related rack environment variables
# based on the uri path and removes the version substring from the uri
# path. If the version substring does not match any potential initialized
# versions, a 404 error is thrown.
#
# Example: For a uri path
#   /v1/resource
#
# The following rack env variables are set and path is rewritten to
# '/resource':
#
#   env['api.version'] => 'v1'
#
# source://grape//lib/grape/middleware/versioner/path.rb#19
class Grape::Middleware::Versioner::Path < ::Grape::Middleware::Base
  # source://grape//lib/grape/middleware/versioner/path.rb#26
  def before; end

  # source://grape//lib/grape/middleware/versioner/path.rb#20
  def default_options; end

  private

  # source://grape//lib/grape/middleware/versioner/path.rb#52
  def mount_path; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/middleware/versioner/path.rb#45
  def mounted_path?(path); end

  # source://grape//lib/grape/middleware/versioner/path.rb#56
  def prefix; end
end

# A container for endpoints or other namespaces, which allows for both
# logical grouping of endpoints as well as sharing common configuration.
# May also be referred to as group, segment, or resource.
#
# source://grape//lib/grape/namespace.rb#7
class Grape::Namespace
  # @option options
  # @param space [String] the name of this namespace
  # @param options [Hash] options hash
  # @return [Namespace] a new instance of Namespace
  #
  # source://grape//lib/grape/namespace.rb#15
  def initialize(space, **options); end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/namespace.rb#8
  def options; end

  # Retrieves the requirements from the options hash, if given.
  #
  # @return [Hash]
  #
  # source://grape//lib/grape/namespace.rb#22
  def requirements; end

  # Returns the value of attribute space.
  #
  # source://grape//lib/grape/namespace.rb#8
  def space; end

  class << self
    # source://grape//lib/grape/namespace.rb#27
    def joined_space(settings); end

    # Join the namespaces from a list of settings to create a path prefix.
    #
    # @param settings [Array] list of Grape::Util::InheritableSettings.
    #
    # source://grape//lib/grape/namespace.rb#33
    def joined_space_path(settings); end
  end
end

# source://grape//lib/grape/namespace.rb#37
class Grape::Namespace::JoinedSpaceCache < ::Grape::Util::Cache
  # @return [JoinedSpaceCache] a new instance of JoinedSpaceCache
  #
  # source://grape//lib/grape/namespace.rb#38
  def initialize; end
end

# source://grape//lib/grape/parser.rb#4
module Grape::Parser
  extend ::Grape::Util::Registrable

  class << self
    # source://grape//lib/grape/parser.rb#8
    def builtin_parsers; end

    # source://grape//lib/grape/parser.rb#20
    def parser_for(api_format, **options); end

    # source://grape//lib/grape/parser.rb#16
    def parsers(**options); end
  end
end

# source://grape//lib/grape/parser/json.rb#5
module Grape::Parser::Json
  class << self
    # source://grape//lib/grape/parser/json.rb#7
    def call(object, _env); end
  end
end

# source://grape//lib/grape/parser/xml.rb#5
module Grape::Parser::Xml
  class << self
    # source://grape//lib/grape/parser/xml.rb#7
    def call(object, _env); end
  end
end

# Represents a path to an endpoint.
#
# source://grape//lib/grape/path.rb#5
class Grape::Path
  # @return [Path] a new instance of Path
  #
  # source://grape//lib/grape/path.rb#8
  def initialize(raw_path, namespace, settings); end

  # source://grape//lib/grape/path.rb#14
  def mount_path; end

  # Returns the value of attribute namespace.
  #
  # source://grape//lib/grape/path.rb#6
  def namespace; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/path.rb#34
  def namespace?; end

  # source://grape//lib/grape/path.rb#52
  def path; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/path.rb#38
  def path?; end

  # source://grape//lib/grape/path.rb#56
  def path_with_suffix; end

  # Returns the value of attribute raw_path.
  #
  # source://grape//lib/grape/path.rb#6
  def raw_path; end

  # source://grape//lib/grape/path.rb#18
  def root_prefix; end

  # Returns the value of attribute settings.
  #
  # source://grape//lib/grape/path.rb#6
  def settings; end

  # source://grape//lib/grape/path.rb#42
  def suffix; end

  # source://grape//lib/grape/path.rb#60
  def to_s; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/path.rb#28
  def uses_path_versioning?; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/path.rb#22
  def uses_specific_format?; end

  private

  # source://grape//lib/grape/path.rb#85
  def add_part(parts, value); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/path.rb#89
  def not_slash?(value); end

  # source://grape//lib/grape/path.rb#75
  def parts; end
end

# source://grape//lib/grape/path.rb#66
class Grape::Path::PartsCache < ::Grape::Util::Cache
  # @return [PartsCache] a new instance of PartsCache
  #
  # source://grape//lib/grape/path.rb#67
  def initialize; end
end

# source://grape//lib/grape.rb#0
module Grape::Presenters; end

# source://grape//lib/grape/presenters/presenter.rb#5
class Grape::Presenters::Presenter
  class << self
    # source://grape//lib/grape/presenters/presenter.rb#6
    def represent(object, **_options); end
  end
end

# source://grape//lib/grape/request.rb#4
class Grape::Request < ::Rack::Request
  # @return [Request] a new instance of Request
  #
  # source://grape//lib/grape/request.rb#9
  def initialize(env, **options); end

  # source://grape//lib/grape/request.rb#22
  def headers; end

  # source://grape//lib/grape/request.rb#14
  def params; end

  # source://rack/3.1.7/lib/rack/request.rb#67
  def rack_params; end

  private

  # source://grape//lib/grape/request.rb#36
  def build_headers; end

  # source://grape//lib/grape/request.rb#28
  def grape_routing_args; end

  # source://grape//lib/grape/request.rb#47
  def transform_header(header); end
end

# source://grape//lib/grape/request.rb#5
Grape::Request::HTTP_PREFIX = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/router.rb#4
class Grape::Router
  # @return [Router] a new instance of Router
  #
  # source://grape//lib/grape/router.rb#15
  def initialize; end

  # source://grape//lib/grape/router.rb#37
  def append(route); end

  # source://grape//lib/grape/router.rb#41
  def associate_routes(pattern, **options); end

  # source://grape//lib/grape/router.rb#48
  def call(env); end

  # source://grape//lib/grape/router.rb#22
  def compile!; end

  # Returns the value of attribute compiled.
  #
  # source://grape//lib/grape/router.rb#5
  def compiled; end

  # Returns the value of attribute map.
  #
  # source://grape//lib/grape/router.rb#5
  def map; end

  # source://grape//lib/grape/router.rb#55
  def recognize_path(input); end

  private

  # source://grape//lib/grape/router.rb#153
  def call_with_allow_headers(env, route); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/router.rb#164
  def cascade?(response); end

  # source://grape//lib/grape/router.rb#140
  def default_response; end

  # source://grape//lib/grape/router.rb#129
  def extract_input_and_method(env); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/router.rb#149
  def greedy_match?(input); end

  # source://grape//lib/grape/router.rb#64
  def identity(env); end

  # source://grape//lib/grape/router.rb#124
  def make_routing_args(default_args, route, input); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/router.rb#145
  def match?(input, method); end

  # source://grape//lib/grape/router.rb#159
  def prepare_env_from_route(env, route); end

  # source://grape//lib/grape/router.rb#119
  def process_route(route, env); end

  # source://grape//lib/grape/router.rb#73
  def rotation(env, exact_route = T.unsafe(nil)); end

  # source://grape//lib/grape/router.rb#168
  def string_for(input); end

  # source://grape//lib/grape/router.rb#86
  def transaction(env); end

  # source://grape//lib/grape/router.rb#135
  def with_optimization; end

  class << self
    # source://grape//lib/grape/router.rb#7
    def normalize_path(path); end
  end
end

# source://grape//lib/grape/router/base_route.rb#5
class Grape::Router::BaseRoute
  # @return [BaseRoute] a new instance of BaseRoute
  #
  # source://grape//lib/grape/router/base_route.rb#10
  def initialize(**options); end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/router/base_route.rb#8
  def attributes; end

  # Returns the value of attribute index.
  #
  # source://grape//lib/grape/router/base_route.rb#8
  def index; end

  # source://activesupport/7.2.1/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # Returns the value of attribute options.
  #
  # source://grape//lib/grape/router/base_route.rb#8
  def options; end

  # Returns the value of attribute pattern.
  #
  # source://grape//lib/grape/router/base_route.rb#8
  def pattern; end

  # source://grape//lib/grape/router/base_route.rb#20
  def pattern_regexp; end

  # source://grape//lib/grape/router/base_route.rb#16
  def regexp_capture_index; end

  # source://grape//lib/grape/router/base_route.rb#24
  def to_regexp(index); end

  private

  # source://activesupport/7.2.1/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://grape//lib/grape/router/base_route.rb#29
class Grape::Router::BaseRoute::CaptureIndexCache < ::Grape::Util::Cache
  # @return [CaptureIndexCache] a new instance of CaptureIndexCache
  #
  # source://grape//lib/grape/router/base_route.rb#30
  def initialize; end
end

# source://grape//lib/grape/router/greedy_route.rb#8
class Grape::Router::GreedyRoute < ::Grape::Router::BaseRoute
  # @return [GreedyRoute] a new instance of GreedyRoute
  #
  # source://grape//lib/grape/router/greedy_route.rb#9
  def initialize(pattern:, **options); end

  # Grape::Router:Route defines params as a function
  #
  # source://grape//lib/grape/router/greedy_route.rb#15
  def params(_input = T.unsafe(nil)); end
end

# source://grape//lib/grape/router/pattern.rb#5
class Grape::Router::Pattern
  extend ::Forwardable

  # @return [Pattern] a new instance of Pattern
  #
  # source://grape//lib/grape/router/pattern.rb#16
  def initialize(pattern, **options); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ===(*args, **_arg1, &block); end

  # source://grape//lib/grape/router/pattern.rb#23
  def captures_default; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def match?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def named_captures(*args, **_arg1, &block); end

  # Returns the value of attribute origin.
  #
  # source://grape//lib/grape/router/pattern.rb#10
  def origin; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def params(*args, **_arg1, &block); end

  # Returns the value of attribute path.
  #
  # source://grape//lib/grape/router/pattern.rb#10
  def path; end

  # Returns the value of attribute pattern.
  #
  # source://grape//lib/grape/router/pattern.rb#10
  def pattern; end

  # Returns the value of attribute to_regexp.
  #
  # source://grape//lib/grape/router/pattern.rb#10
  def to_regexp; end

  private

  # source://grape//lib/grape/router/pattern.rb#40
  def build_path(pattern, anchor: T.unsafe(nil), suffix: T.unsafe(nil)); end

  # source://grape//lib/grape/router/pattern.rb#54
  def build_path_from_pattern(pattern, anchor: T.unsafe(nil)); end

  # source://grape//lib/grape/router/pattern.rb#31
  def build_pattern(path, options); end

  # source://grape//lib/grape/router/pattern.rb#44
  def extract_capture(**options); end
end

# source://grape//lib/grape/router/pattern.rb#8
Grape::Router::Pattern::DEFAULT_CAPTURES = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/router/pattern.rb#66
class Grape::Router::Pattern::PatternCache < ::Grape::Util::Cache
  # @return [PatternCache] a new instance of PatternCache
  #
  # source://grape//lib/grape/router/pattern.rb#67
  def initialize; end
end

# source://grape//lib/grape/router/route.rb#5
class Grape::Router::Route < ::Grape::Router::BaseRoute
  extend ::Forwardable

  # @return [Route] a new instance of Route
  #
  # source://grape//lib/grape/router/route.rb#12
  def initialize(method, pattern, **options); end

  # Returns the value of attribute app.
  #
  # source://grape//lib/grape/router/route.rb#8
  def app; end

  # source://grape//lib/grape/router/route.rb#22
  def apply(app); end

  # source://grape//lib/grape/router/route.rb#18
  def exec(env); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/router/route.rb#27
  def match?(input); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def origin(*args, **_arg1, &block); end

  # source://grape//lib/grape/router/route.rb#33
  def params(input = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def path(*args, **_arg1, &block); end

  # Returns the value of attribute request_method.
  #
  # source://grape//lib/grape/router/route.rb#8
  def request_method; end

  private

  # source://grape//lib/grape/router/route.rb#44
  def params_without_input; end

  # source://grape//lib/grape/router/route.rb#48
  def upcase_method(method); end
end

# source://grape//lib/grape.rb#0
module Grape::ServeStream; end

# source://grape//lib/grape/serve_stream/file_body.rb#5
Grape::ServeStream::CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# Class helps send file through API
#
# source://grape//lib/grape/serve_stream/file_body.rb#8
class Grape::ServeStream::FileBody
  # @param path [String]
  # @return [FileBody] a new instance of FileBody
  #
  # source://grape//lib/grape/serve_stream/file_body.rb#12
  def initialize(path); end

  # source://grape//lib/grape/serve_stream/file_body.rb#31
  def ==(other); end

  # source://grape//lib/grape/serve_stream/file_body.rb#23
  def each; end

  # Returns the value of attribute path.
  #
  # source://grape//lib/grape/serve_stream/file_body.rb#9
  def path; end

  # Need for Rack::Sendfile middleware
  #
  # @return [String]
  #
  # source://grape//lib/grape/serve_stream/file_body.rb#19
  def to_path; end
end

# Response should respond to to_path method
# for using Rack::SendFile middleware
#
# source://grape//lib/grape/serve_stream/sendfile_response.rb#7
class Grape::ServeStream::SendfileResponse < ::Rack::Response
  # @return [Boolean]
  #
  # source://grape//lib/grape/serve_stream/sendfile_response.rb#8
  def respond_to?(method_name, include_all = T.unsafe(nil)); end

  # source://grape//lib/grape/serve_stream/sendfile_response.rb#16
  def to_path; end
end

# A simple class used to identify responses which represent streams (or files) and do not
# need to be formatted or pre-read by Rack::Response
#
# source://grape//lib/grape/serve_stream/stream_response.rb#7
class Grape::ServeStream::StreamResponse
  # @param stream [Object]
  # @return [StreamResponse] a new instance of StreamResponse
  #
  # source://grape//lib/grape/serve_stream/stream_response.rb#11
  def initialize(stream); end

  # Equality provided mostly for tests.
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/serve_stream/stream_response.rb#18
  def ==(other); end

  # Returns the value of attribute stream.
  #
  # source://grape//lib/grape/serve_stream/stream_response.rb#8
  def stream; end
end

# source://grape//lib/grape.rb#0
module Grape::Types; end

# source://grape//lib/grape/types/invalid_value.rb#6
class Grape::Types::InvalidValue < ::Grape::Validations::Types::InvalidValue; end

# source://grape//lib/grape/http/headers.rb#0
module Grape::Util; end

# source://grape//lib/grape/util/accept_header_handler.rb#5
class Grape::Util::AcceptHeaderHandler
  # @return [AcceptHeaderHandler] a new instance of AcceptHeaderHandler
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#8
  def initialize(accept_header:, versions:, **options); end

  # Returns the value of attribute accept_header.
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#6
  def accept_header; end

  # Returns the value of attribute cascade.
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#6
  def cascade; end

  # source://grape//lib/grape/util/accept_header_handler.rb#16
  def match_best_quality_media_type!(content_types: T.unsafe(nil), allowed_methods: T.unsafe(nil)); end

  # Returns the value of attribute strict.
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#6
  def strict; end

  # Returns the value of attribute vendor.
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#6
  def vendor; end

  # Returns the value of attribute versions.
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#6
  def versions; end

  private

  # source://grape//lib/grape/util/accept_header_handler.rb#37
  def accept_header_check!; end

  # source://grape//lib/grape/util/accept_header_handler.rb#88
  def available_media_types(content_types); end

  # source://grape//lib/grape/util/accept_header_handler.rb#84
  def error_headers; end

  # source://grape//lib/grape/util/accept_header_handler.rb#65
  def fail!(grape_allowed_methods); end

  # @raise [Grape::Exceptions::InvalidAcceptHeader]
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#57
  def invalid_accept_header!(message); end

  # @raise [Grape::Exceptions::InvalidVersionHeader]
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#61
  def invalid_version_header!(message); end

  # source://grape//lib/grape/util/accept_header_handler.rb#49
  def q_values_mime_types; end

  # source://grape//lib/grape/util/accept_header_handler.rb#30
  def strict_header_checks!; end

  # source://grape//lib/grape/util/accept_header_handler.rb#72
  def vendor_not_found!(media_types); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/accept_header_handler.rb#53
  def version_and_vendor?; end

  # source://grape//lib/grape/util/accept_header_handler.rb#43
  def version_and_vendor_check!; end

  # source://grape//lib/grape/util/accept_header_handler.rb#78
  def version_not_found!(media_types); end
end

# Base for classes which need to operate with own values kept
# in the hash and inherited values kept in a Hash-like object.
#
# source://grape//lib/grape/util/base_inheritable.rb#7
class Grape::Util::BaseInheritable
  # @param inherited_values [Object] An object implementing an interface
  #   of the Hash class.
  # @return [BaseInheritable] a new instance of BaseInheritable
  #
  # source://grape//lib/grape/util/base_inheritable.rb#12
  def initialize(inherited_values = T.unsafe(nil)); end

  # source://grape//lib/grape/util/base_inheritable.rb#17
  def delete(key); end

  # Returns the value of attribute inherited_values.
  #
  # source://grape//lib/grape/util/base_inheritable.rb#8
  def inherited_values; end

  # Sets the attribute inherited_values
  #
  # @param value the value to set the attribute inherited_values to.
  #
  # source://grape//lib/grape/util/base_inheritable.rb#8
  def inherited_values=(_arg0); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/base_inheritable.rb#38
  def key?(name); end

  # source://grape//lib/grape/util/base_inheritable.rb#27
  def keys; end

  # Returns the value of attribute new_values.
  #
  # source://grape//lib/grape/util/base_inheritable.rb#8
  def new_values; end

  # Sets the attribute new_values
  #
  # @param value the value to set the attribute new_values to.
  #
  # source://grape//lib/grape/util/base_inheritable.rb#8
  def new_values=(_arg0); end

  private

  # source://grape//lib/grape/util/base_inheritable.rb#21
  def initialize_copy(other); end
end

# source://grape//lib/grape/util/cache.rb#5
class Grape::Util::Cache
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # Returns the value of attribute cache.
  #
  # source://grape//lib/grape/util/cache.rb#8
  def cache; end

  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def [](*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def cache(*args, **_arg1, &block); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://grape//lib/grape/util/endpoint_configuration.rb#5
class Grape::Util::EndpointConfiguration < ::Grape::Util::Lazy::ValueHash; end

# source://grape//lib/grape/util/header.rb#7
Grape::Util::Header = Rack::Headers

# A branchable, inheritable settings object which can store both stackable
# and inheritable values (see InheritableValues and StackableValues).
#
# source://grape//lib/grape/util/inheritable_setting.rb#7
class Grape::Util::InheritableSetting
  # Instantiate a new settings instance, with blank values. The fresh
  # instance can then be set to inherit from an existing instance (see
  # #inherit_from).
  #
  # @return [InheritableSetting] a new instance of InheritableSetting
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#25
  def initialize; end

  # Returns the value of attribute api_class.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def api_class; end

  # Sets the attribute api_class
  #
  # @param value the value to set the attribute api_class to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def api_class=(_arg0); end

  # Return the class-level global properties.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#40
  def global; end

  # Set our inherited values to the given parent's current values. Also,
  # update the inherited values on any settings instances which were forked
  # from us.
  #
  # @param parent [InheritableSetting]
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#48
  def inherit_from(parent); end

  # Returns the value of attribute namespace.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace; end

  # Sets the attribute namespace
  #
  # @param value the value to set the attribute namespace to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace=(_arg0); end

  # Returns the value of attribute namespace_inheritable.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_inheritable; end

  # Sets the attribute namespace_inheritable
  #
  # @param value the value to set the attribute namespace_inheritable to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_inheritable=(_arg0); end

  # Returns the value of attribute namespace_reverse_stackable.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_reverse_stackable; end

  # Sets the attribute namespace_reverse_stackable
  #
  # @param value the value to set the attribute namespace_reverse_stackable to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_reverse_stackable=(_arg0); end

  # Returns the value of attribute namespace_stackable.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_stackable; end

  # Sets the attribute namespace_stackable
  #
  # @param value the value to set the attribute namespace_stackable to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def namespace_stackable=(_arg0); end

  # Returns the value of attribute parent.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def parent=(_arg0); end

  # Returns the value of attribute point_in_time_copies.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def point_in_time_copies; end

  # Sets the attribute point_in_time_copies
  #
  # @param value the value to set the attribute point_in_time_copies to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def point_in_time_copies=(_arg0); end

  # Create a point-in-time copy of this settings instance, with clones of
  # all our values. Note that, should this instance's parent be set or
  # changed via #inherit_from, it will copy that inheritence to any copies
  # which were made.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#65
  def point_in_time_copy; end

  # Returns the value of attribute route.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def route; end

  # Sets the attribute route
  #
  # @param value the value to set the attribute route to.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#8
  def route=(_arg0); end

  # Resets the instance store of per-route settings.
  #
  # @api private
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#83
  def route_end; end

  # Return a serializable hash of our values.
  #
  # source://grape//lib/grape/util/inheritable_setting.rb#88
  def to_hash; end

  class << self
    # Retrieve global settings.
    #
    # source://grape//lib/grape/util/inheritable_setting.rb#11
    def global; end

    # Clear all global settings.
    #
    # @api private
    # @note only for testing
    #
    # source://grape//lib/grape/util/inheritable_setting.rb#18
    def reset_global!; end
  end
end

# source://grape//lib/grape/util/inheritable_values.rb#5
class Grape::Util::InheritableValues < ::Grape::Util::BaseInheritable
  # source://grape//lib/grape/util/inheritable_values.rb#6
  def [](name); end

  # source://grape//lib/grape/util/inheritable_values.rb#10
  def []=(name, value); end

  # source://grape//lib/grape/util/inheritable_values.rb#14
  def merge(new_hash); end

  # source://grape//lib/grape/util/inheritable_values.rb#18
  def to_hash; end

  protected

  # source://grape//lib/grape/util/inheritable_values.rb#24
  def values; end
end

# source://grape//lib/grape/http/headers.rb#0
module Grape::Util::Lazy; end

# source://grape//lib/grape/util/lazy/block.rb#6
class Grape::Util::Lazy::Block
  # @return [Block] a new instance of Block
  #
  # source://grape//lib/grape/util/lazy/block.rb#7
  def initialize(&new_block); end

  # source://grape//lib/grape/util/lazy/block.rb#15
  def evaluate; end

  # source://grape//lib/grape/util/lazy/block.rb#11
  def evaluate_from(configuration); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/lazy/block.rb#19
  def lazy?; end

  # source://grape//lib/grape/util/lazy/block.rb#23
  def to_s; end
end

# source://grape//lib/grape/util/lazy/object.rb#8
class Grape::Util::Lazy::Object < ::BasicObject
  # @return [Object] a new instance of Object
  #
  # source://grape//lib/grape/util/lazy/object.rb#11
  def initialize(&callable); end

  # source://grape//lib/grape/util/lazy/object.rb#27
  def !; end

  # source://grape//lib/grape/util/lazy/object.rb#23
  def !=(other); end

  # source://grape//lib/grape/util/lazy/object.rb#19
  def ==(other); end

  # source://grape//lib/grape/util/lazy/object.rb#15
  def __target_object__; end

  # Returns the value of attribute callable.
  #
  # source://grape//lib/grape/util/lazy/object.rb#9
  def callable; end

  # source://grape//lib/grape/util/lazy/object.rb#31
  def method_missing(method_name, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/lazy/object.rb#39
  def respond_to_missing?(method_name, include_priv = T.unsafe(nil)); end
end

# source://grape//lib/grape/util/lazy/value.rb#6
class Grape::Util::Lazy::Value
  # @return [Value] a new instance of Value
  #
  # source://grape//lib/grape/util/lazy/value.rb#9
  def initialize(value, access_keys = T.unsafe(nil)); end

  # Returns the value of attribute access_keys.
  #
  # source://grape//lib/grape/util/lazy/value.rb#7
  def access_keys; end

  # source://grape//lib/grape/util/lazy/value.rb#19
  def evaluate; end

  # source://grape//lib/grape/util/lazy/value.rb#14
  def evaluate_from(configuration); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/lazy/value.rb#23
  def lazy?; end

  # source://grape//lib/grape/util/lazy/value.rb#27
  def reached_by(parent_access_keys, access_key); end

  # source://grape//lib/grape/util/lazy/value.rb#32
  def to_s; end
end

# source://grape//lib/grape/util/lazy/value_array.rb#6
class Grape::Util::Lazy::ValueArray < ::Grape::Util::Lazy::ValueEnumerable
  # @return [ValueArray] a new instance of ValueArray
  #
  # source://grape//lib/grape/util/lazy/value_array.rb#7
  def initialize(array); end

  # source://grape//lib/grape/util/lazy/value_array.rb#15
  def evaluate; end
end

# source://grape//lib/grape/util/lazy/value_enumerable.rb#6
class Grape::Util::Lazy::ValueEnumerable < ::Grape::Util::Lazy::Value
  # source://grape//lib/grape/util/lazy/value_enumerable.rb#7
  def [](key); end

  # source://grape//lib/grape/util/lazy/value_enumerable.rb#21
  def []=(key, value); end

  # source://grape//lib/grape/util/lazy/value_enumerable.rb#15
  def fetch(access_keys); end
end

# source://grape//lib/grape/util/lazy/value_hash.rb#6
class Grape::Util::Lazy::ValueHash < ::Grape::Util::Lazy::ValueEnumerable
  # @return [ValueHash] a new instance of ValueHash
  #
  # source://grape//lib/grape/util/lazy/value_hash.rb#7
  def initialize(hash); end

  # source://grape//lib/grape/util/lazy/value_hash.rb#15
  def evaluate; end
end

# source://grape//lib/grape/util/media_type.rb#5
class Grape::Util::MediaType
  # @return [MediaType] a new instance of MediaType
  #
  # source://grape//lib/grape/util/media_type.rb#12
  def initialize(type:, subtype:); end

  # source://grape//lib/grape/util/media_type.rb#22
  def ==(other); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/util/media_type.rb#26
  def eql?(other); end

  # Returns the value of attribute format.
  #
  # source://grape//lib/grape/util/media_type.rb#6
  def format; end

  # source://grape//lib/grape/util/media_type.rb#35
  def hash; end

  # Returns the value of attribute subtype.
  #
  # source://grape//lib/grape/util/media_type.rb#6
  def subtype; end

  # Returns the value of attribute type.
  #
  # source://grape//lib/grape/util/media_type.rb#6
  def type; end

  # Returns the value of attribute vendor.
  #
  # source://grape//lib/grape/util/media_type.rb#6
  def vendor; end

  # Returns the value of attribute version.
  #
  # source://grape//lib/grape/util/media_type.rb#6
  def version; end

  class << self
    # source://grape//lib/grape/util/media_type.rb#40
    def best_quality(header, available_media_types); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/util/media_type.rb#53
    def match?(media_type); end

    # source://grape//lib/grape/util/media_type.rb#44
    def parse(media_type); end

    private

    # source://grape//lib/grape/util/media_type.rb#62
    def best_quality_media_type(header, available_media_types); end
  end
end

# based on the HTTP Accept header with the pattern:
# application/vnd.:vendor-:version+:format
#
# source://grape//lib/grape/util/media_type.rb#10
Grape::Util::MediaType::VENDOR_VERSION_HEADER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://grape//lib/grape/util/registrable.rb#5
module Grape::Util::Registrable
  # source://grape//lib/grape/util/registrable.rb#6
  def default_elements; end

  # source://grape//lib/grape/util/registrable.rb#10
  def register(format, element); end
end

# source://grape//lib/grape/util/reverse_stackable_values.rb#5
class Grape::Util::ReverseStackableValues < ::Grape::Util::StackableValues
  protected

  # source://grape//lib/grape/util/reverse_stackable_values.rb#8
  def concat_values(inherited_value, new_value); end
end

# source://grape//lib/grape/util/stackable_values.rb#5
class Grape::Util::StackableValues < ::Grape::Util::BaseInheritable
  # Even if there is no value, an empty array will be returned.
  #
  # source://grape//lib/grape/util/stackable_values.rb#7
  def [](name); end

  # source://grape//lib/grape/util/stackable_values.rb#16
  def []=(name, value); end

  # source://grape//lib/grape/util/stackable_values.rb#21
  def to_hash; end

  protected

  # source://grape//lib/grape/util/stackable_values.rb#29
  def concat_values(inherited_value, new_value); end
end

# source://grape//lib/grape/util/strict_hash_configuration.rb#5
module Grape::Util::StrictHashConfiguration
  extend ::ActiveSupport::Concern

  class << self
    # source://grape//lib/grape/util/strict_hash_configuration.rb#33
    def config_class(*args); end

    # source://grape//lib/grape/util/strict_hash_configuration.rb#91
    def create_class_mod(args); end

    # source://grape//lib/grape/util/strict_hash_configuration.rb#78
    def module(*args); end

    # source://grape//lib/grape/util/strict_hash_configuration.rb#56
    def nested_settings_methods(setting_name, new_config_class); end

    # source://grape//lib/grape/util/strict_hash_configuration.rb#47
    def simple_settings_methods(setting_name, new_config_class); end
  end
end

# source://grape//lib/grape/util/strict_hash_configuration.rb#8
module Grape::Util::StrictHashConfiguration::DSL
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Grape::Util::StrictHashConfiguration::DSL::ClassMethods
end

# source://grape//lib/grape/util/strict_hash_configuration.rb#11
module Grape::Util::StrictHashConfiguration::DSL::ClassMethods
  # source://grape//lib/grape/util/strict_hash_configuration.rb#16
  def configure(&block); end

  # source://grape//lib/grape/util/strict_hash_configuration.rb#12
  def settings; end
end

# source://grape//lib/grape/util/strict_hash_configuration.rb#22
class Grape::Util::StrictHashConfiguration::SettingsContainer
  # @return [SettingsContainer] a new instance of SettingsContainer
  #
  # source://grape//lib/grape/util/strict_hash_configuration.rb#23
  def initialize; end

  # source://grape//lib/grape/util/strict_hash_configuration.rb#28
  def to_hash; end
end

# The current version of Grape.
#
# source://grape//lib/grape/version.rb#5
Grape::VERSION = T.let(T.unsafe(nil), String)

# source://grape//lib/grape/validations.rb#4
module Grape::Validations
  private

  # source://grape//lib/grape/validations.rb#19
  def deregister_validator(short_name); end

  # Register a new validator, so it can be used to validate parameters.
  #
  # @param short_name [String] all lower-case, no spaces
  # @param klass [Class] the validator class. Should inherit from
  #   Grape::Validations::Validators::Base.
  #
  # source://grape//lib/grape/validations.rb#15
  def register_validator(short_name, klass); end

  # source://grape//lib/grape/validations.rb#23
  def require_validator(short_name); end

  # source://grape//lib/grape/validations.rb#7
  def validators; end

  class << self
    # source://grape//lib/grape/validations.rb#19
    def deregister_validator(short_name); end

    # Register a new validator, so it can be used to validate parameters.
    #
    # @param short_name [String] all lower-case, no spaces
    # @param klass [Class] the validator class. Should inherit from
    #   Grape::Validations::Validators::Base.
    #
    # source://grape//lib/grape/validations.rb#15
    def register_validator(short_name, klass); end

    # source://grape//lib/grape/validations.rb#23
    def require_validator(short_name); end

    # source://grape//lib/grape/validations.rb#7
    def validators; end
  end
end

# Documents parameters of an endpoint. If documentation isn't needed (for instance, it is an
# internal API), the class only cleans up attributes to avoid junk in RAM.
#
# source://grape//lib/grape/validations/attributes_doc.rb#8
class Grape::Validations::AttributesDoc
  # @param api [Grape::API::Instance]
  # @param scope [Validations::ParamsScope]
  # @return [AttributesDoc] a new instance of AttributesDoc
  #
  # source://grape//lib/grape/validations/attributes_doc.rb#13
  def initialize(api, scope); end

  # source://grape//lib/grape/validations/attributes_doc.rb#36
  def document(attrs); end

  # source://grape//lib/grape/validations/attributes_doc.rb#19
  def extract_details(validations); end

  # source://grape//lib/grape/validations/attributes_doc.rb#49
  def required; end

  # Returns the value of attribute type.
  #
  # source://grape//lib/grape/validations/attributes_doc.rb#9
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://grape//lib/grape/validations/attributes_doc.rb#9
  def type=(_arg0); end

  # Returns the value of attribute values.
  #
  # source://grape//lib/grape/validations/attributes_doc.rb#9
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://grape//lib/grape/validations/attributes_doc.rb#9
  def values=(_arg0); end

  protected

  # source://grape//lib/grape/validations/attributes_doc.rb#55
  def details; end
end

# source://grape//lib/grape/validations/attributes_iterator.rb#5
class Grape::Validations::AttributesIterator
  include ::Enumerable

  # @return [AttributesIterator] a new instance of AttributesIterator
  #
  # source://grape//lib/grape/validations/attributes_iterator.rb#10
  def initialize(validator, scope, params); end

  # source://grape//lib/grape/validations/attributes_iterator.rb#17
  def each(&block); end

  # Returns the value of attribute scope.
  #
  # source://grape//lib/grape/validations/attributes_iterator.rb#8
  def scope; end

  private

  # source://grape//lib/grape/validations/attributes_iterator.rb#23
  def do_each(params_to_process, parent_indicies = T.unsafe(nil), &block); end

  # This is a special case so that we can ignore tree's where option
  # values are missing lower down. Unfortunately we can remove this
  # are the parameter parsing stage as they are required to ensure
  # the correct indexing is maintained
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/attributes_iterator.rb#57
  def skip?(val); end

  # @raise [NotImplementedError]
  #
  # source://grape//lib/grape/validations/attributes_iterator.rb#49
  def yield_attributes(_resource_params, _attrs); end
end

# source://grape//lib/grape/validations/validators/base.rb#87
class Grape::Validations::Base < ::Grape::Validations::Validators::Base
  class << self
    # source://grape//lib/grape/validations/validators/base.rb#88
    def inherited(*_arg0); end
  end
end

# source://grape//lib/grape/validations/contract_scope.rb#5
class Grape::Validations::ContractScope
  # Declare the contract to be used for the endpoint's parameters.
  #
  # @param api [API] the API endpoint to modify.
  # @param contract the contract or schema to be used for validation. Optional.
  # @return [ContractScope] a new instance of ContractScope
  # @yield a block yielding a new schema class. Optional.
  #
  # source://grape//lib/grape/validations/contract_scope.rb#10
  def initialize(api, contract = T.unsafe(nil), &block); end
end

# source://grape//lib/grape/validations/contract_scope.rb#33
class Grape::Validations::ContractScope::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://grape//lib/grape/validations/contract_scope.rb#36
  def initialize(*_args, schema:); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/contract_scope.rb#65
  def fail_fast?; end

  # Returns the value of attribute schema.
  #
  # source://grape//lib/grape/validations/contract_scope.rb#34
  def schema; end

  # Validates a given request.
  #
  # @param request [Grape::Request] the request currently being handled
  # @raise [Grape::Exceptions::ValidationArrayErrors] if validation failed
  # @return [void]
  #
  # source://grape//lib/grape/validations/contract_scope.rb#44
  def validate(request); end
end

# source://grape//lib/grape/validations/multiple_attributes_iterator.rb#5
class Grape::Validations::MultipleAttributesIterator < ::Grape::Validations::AttributesIterator
  private

  # @yield [resource_params]
  #
  # source://grape//lib/grape/validations/multiple_attributes_iterator.rb#8
  def yield_attributes(resource_params, _attrs); end
end

# source://grape//lib/grape/validations/params_scope.rb#5
class Grape::Validations::ParamsScope
  include ::Grape::DSL::Parameters

  # Open up a new ParamsScope, allowing parameter definitions per
  #   Grape::DSL::Params.
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] options for this scope
  # @return [ParamsScope] a new instance of ParamsScope
  # @yield the instance context, open for parameter definitions
  #
  # source://grape//lib/grape/validations/params_scope.rb#61
  def initialize(opts, &block); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/params_scope.rb#102
  def attr_meets_dependency?(params); end

  # source://grape//lib/grape/validations/params_scope.rb#141
  def brackets(val); end

  # source://grape//lib/grape/validations/params_scope.rb#78
  def configuration; end

  # Returns the value of attribute element.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def element; end

  # Sets the attribute element
  #
  # @param value the value to set the attribute element to.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def element=(_arg0); end

  # @return [String] the proper attribute name, with nesting considered.
  #
  # source://grape//lib/grape/validations/params_scope.rb#127
  def full_name(name, index: T.unsafe(nil)); end

  # Returns the value of attribute index.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def index; end

  # Sets the attribute index
  #
  # @param value the value to set the attribute index to.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def index=(_arg0); end

  # A lateral scope is subordinate to its parent, but its keys are at the
  # same level as its parent and thus is not contained within an element.
  #
  # @return [Boolean] whether or not this scope is lateral
  #
  # source://grape//lib/grape/validations/params_scope.rb#159
  def lateral?; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/params_scope.rb#94
  def meets_dependency?(params, request_params); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/params_scope.rb#109
  def meets_hash_dependency?(params); end

  # A nested scope is contained in one of its parent's elements.
  #
  # @return [Boolean] whether or not this scope is nested
  #
  # source://grape//lib/grape/validations/params_scope.rb#152
  def nested?; end

  # Returns the value of attribute parent.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://grape//lib/grape/validations/params_scope.rb#6
  def parent=(_arg0); end

  # @return [Boolean] whether or not this scope needs to be present, or can
  #   be blank
  #
  # source://grape//lib/grape/validations/params_scope.rb#165
  def required?; end

  # source://grape//lib/grape/validations/params_scope.rb#169
  def reset_index; end

  # @return [Boolean] whether or not this scope is the root-level scope
  #
  # source://grape//lib/grape/validations/params_scope.rb#146
  def root?; end

  # @return [Boolean] whether or not this entire scope needs to be
  #   validated
  #
  # source://grape//lib/grape/validations/params_scope.rb#84
  def should_validate?(parameters); end

  # Returns the value of attribute type.
  #
  # source://grape//lib/grape/validations/params_scope.rb#7
  def type; end

  protected

  # Get the full path of the parameter scope in the hierarchy.
  #
  # @return [Array<Symbol>] the nesting/path of the current parameter scope
  #
  # source://grape//lib/grape/validations/params_scope.rb#192
  def full_path; end

  # Adds a parameter declaration to our list of validations.
  #
  # @param attrs [Array] (see Grape::DSL::Parameters#requires)
  #
  # source://grape//lib/grape/validations/params_scope.rb#177
  def push_declared_params(attrs, **opts); end

  private

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/params_scope.rb#514
  def all_element_blank?(scoped_params); end

  # Enforce correct usage of :coerce_with parameter.
  # We do not allow coercion without a type, nor with
  # +JSON+ as a type since this defines its own coercion
  # method.
  #
  # @raise [ArgumentError]
  #
  # source://grape//lib/grape/validations/params_scope.rb#420
  def check_coerce_with(validations); end

  # @raise [Grape::Exceptions::IncompatibleOptionValues]
  #
  # source://grape//lib/grape/validations/params_scope.rb#464
  def check_incompatible_option_values(default, values, except_values, excepts); end

  # Add type coercion validation to this scope,
  # if any has been specified.
  # This validation has special handling since it is
  # composited from more than one +requires+/+optional+
  # parameter, and needs to be run before most other
  # validations.
  #
  # source://grape//lib/grape/validations/params_scope.rb#438
  def coerce_type(validations, attrs, doc, opts); end

  # Pushes declared params to parent or settings
  #
  # source://grape//lib/grape/validations/params_scope.rb#311
  def configure_declared_params; end

  # Validators don't have access to each other and they don't need, however,
  # some validators might influence others, so their options should be shared
  #
  # source://grape//lib/grape/validations/params_scope.rb#520
  def derive_validator_options(validations); end

  # source://grape//lib/grape/validations/params_scope.rb#503
  def extract_message_option(attrs); end

  # source://grape//lib/grape/validations/params_scope.rb#454
  def guess_coerce_type(coerce_type, *values_list); end

  # Validate and comprehend the +:type+, +:types+, and +:coerce_with+
  # options that have been supplied to the parameter declaration.
  # The +:type+ and +:types+ options will be removed from the
  # validations list, replaced appropriately with +:coerce+ and
  # +:coerce_with+ options that will later be passed to
  # {Validators::CoerceValidator}. The type that is returned may be
  # used for documentation and further validation of parameter
  # options.
  #
  # @param validations [Hash] list of validations supplied to the
  #   parameter declaration
  # @raise [ArgumentError] if the given type options are invalid
  # @return [class-like] type to which the parameter will be coerced
  #
  # source://grape//lib/grape/validations/params_scope.rb#391
  def infer_coercion(validations); end

  # Returns a new parameter scope, subordinate to the current one and nested
  # under the parameter corresponding to `attrs.first`.
  #
  # @param attrs [Array] the attributes passed to the `requires` or
  #   `optional` invocation that opened this scope.
  # @yield parameter scope
  #
  # source://grape//lib/grape/validations/params_scope.rb#306
  def new_group_scope(attrs, &block); end

  # Returns a new parameter scope, not nested under any current-level param
  # but instead at the same level as the current scope.
  #
  # @option options
  # @param options [Hash] options to control how this new scope behaves
  # @yield parameter scope
  #
  # source://grape//lib/grape/validations/params_scope.rb#289
  def new_lateral_scope(options, &block); end

  # Returns a new parameter scope, subordinate to the current one and nested
  # under the parameter corresponding to `attrs.first`.
  #
  # @param attrs [Array] the attributes passed to the `requires` or
  #   `optional` invocation that opened this scope.
  # @param optional [Boolean] whether the parameter this are nested under
  #   is optional or not (and hence, whether this block's params will be).
  # @yield parameter scope
  #
  # source://grape//lib/grape/validations/params_scope.rb#262
  def new_scope(attrs, optional = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/params_scope.rb#510
  def options_key?(type, key, validations); end

  # Add a new parameter which should be renamed when using the +#declared+
  # method.
  #
  # @param path [Array<String, Symbol>] the full path of the parameter
  #   (including the parameter name as last array element)
  # @param new_name [String, Symbol] the new name of the parameter (the
  #   renamed name, with the +as: ...+ semantic)
  #
  # source://grape//lib/grape/validations/params_scope.rb#211
  def push_renamed_param(path, new_name); end

  # source://grape//lib/grape/validations/params_scope.rb#237
  def require_optional_fields(context, opts); end

  # source://grape//lib/grape/validations/params_scope.rb#217
  def require_required_and_optional_fields(context, opts); end

  # source://grape//lib/grape/validations/params_scope.rb#478
  def validate(type, options, attrs, doc, opts); end

  # source://grape//lib/grape/validations/params_scope.rb#249
  def validate_attributes(attrs, opts, &block); end

  # source://grape//lib/grape/validations/params_scope.rb#490
  def validate_value_coercion(coerce_type, *values_list); end

  # source://grape//lib/grape/validations/params_scope.rb#324
  def validates(attrs, validations); end

  # source://grape//lib/grape/validations/params_scope.rb#529
  def validates_presence(validations, attrs, doc, opts); end
end

# source://grape//lib/grape/validations/params_scope.rb#16
class Grape::Validations::ParamsScope::Attr
  # Open up a new ParamsScope::Attr
  #
  # @param key [Hash, Symbol] key of attr
  # @param scope [Grape::Validations::ParamsScope] scope of attr
  # @return [Attr] a new instance of Attr
  #
  # source://grape//lib/grape/validations/params_scope.rb#22
  def initialize(key, scope); end

  # Returns the value of attribute key.
  #
  # source://grape//lib/grape/validations/params_scope.rb#17
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://grape//lib/grape/validations/params_scope.rb#17
  def key=(_arg0); end

  # Returns the value of attribute scope.
  #
  # source://grape//lib/grape/validations/params_scope.rb#17
  def scope; end

  # Sets the attribute scope
  #
  # @param value the value to set the attribute scope to.
  #
  # source://grape//lib/grape/validations/params_scope.rb#17
  def scope=(_arg0); end

  class << self
    # source://grape//lib/grape/validations/params_scope.rb#34
    def attr_key(declared_param_attr); end

    # source://grape//lib/grape/validations/params_scope.rb#28
    def attrs_keys(declared_params); end
  end
end

# There are a number of documentation options on entities that don't have
# corresponding validators. Since there is nowhere that enumerates them all,
# we maintain a list of them here and skip looking up validators for them.
#
# source://grape//lib/grape/validations/params_scope.rb#14
Grape::Validations::ParamsScope::RESERVED_DOCUMENTATION_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://grape//lib/grape/validations/single_attribute_iterator.rb#5
class Grape::Validations::SingleAttributeIterator < ::Grape::Validations::AttributesIterator
  private

  # Primitives like Integers and Booleans don't respond to +empty?+.
  # It could be possible to use +blank?+ instead, but
  #
  #     false.blank?
  #     => true
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/single_attribute_iterator.rb#21
  def empty?(val); end

  # source://grape//lib/grape/validations/single_attribute_iterator.rb#8
  def yield_attributes(val, attrs); end
end

# Module for code related to grape's system for
# coercion and type validation of incoming request
# parameters.
#
# Grape uses a number of tests and assertions to
# work out exactly how a parameter should be handled,
# based on the +type+ and +coerce_with+ options that
# may be supplied to {Grape::Dsl::Parameters#requires}
# and {Grape::Dsl::Parameters#optional}. The main
# entry point for this process is {Types.build_coercer}.
#
# source://grape//lib/grape/validations/types.rb#15
module Grape::Validations::Types
  private

  # Chooses the best coercer for the given type. For example, if the type
  # is Integer, it will return a coercer which will be able to coerce a value
  # to the integer.
  #
  # There are a few very special coercers which might be returned.
  #
  # +Grape::Types::MultipleTypeCoercer+ is a coercer which is returned when
  # the given type implies values in an array with different types.
  # For example, +[Integer, String]+ allows integer and string values in
  # an array.
  #
  # +Grape::Types::CustomTypeCoercer+ is a coercer which is returned when
  # a method is specified by a user with +coerce_with+ option or the user
  # specifies a custom type which implements requirments of
  # +Grape::Types::CustomTypeCoercer+.
  #
  # +Grape::Types::CustomTypeCollectionCoercer+ is a very similar to the
  # previous one, but it expects an array or set of values having a custom
  # type implemented by the user.
  #
  # There is also a group of custom types implemented by Grape, check
  # +Grape::Validations::Types::SPECIAL+ to get the full list.
  #
  # @param type [Class] the type to which input strings
  #   should be coerced
  # @param method [Class, #call] the coercion method to use
  # @return [Object] object to be used
  #   for coercion and type validation
  #
  # source://grape//lib/grape/validations/types.rb#157
  def build_coercer(type, method: T.unsafe(nil), strict: T.unsafe(nil)); end

  # source://grape//lib/grape/validations/types.rb#187
  def cache_instance(type, method, strict, &_block); end

  # source://grape//lib/grape/validations/types.rb#201
  def cache_key(type, method, strict); end

  # Is the declared type an +Array+ or +Set+ of a {#custom?} type?
  #
  # @param type [Array<Class>, Class] type to check
  # @return [Boolean] true if +type+ is a collection of a type that implements
  #   its own +#parse+ method.
  #
  # source://grape//lib/grape/validations/types.rb#119
  def collection_of_custom?(type); end

  # source://grape//lib/grape/validations/types.rb#163
  def create_coercer_instance(type, method, strict); end

  # A valid custom type must implement a class-level `parse` method, taking
  # one String argument and returning the parsed value in its correct type.
  #
  # @param type [Class] type to check
  # @return [Boolean] whether or not the type can be used as a custom type
  #
  # source://grape//lib/grape/validations/types.rb#106
  def custom?(type); end

  # Is the declared type a supported group type?
  # Currently supported group types are Array, Hash, JSON, and Array[JSON]
  #
  # @param type [Array<Class>, Class] type to check
  # @return [Boolean] +true+ if the type is a supported group type
  #
  # source://grape//lib/grape/validations/types.rb#97
  def group?(type); end

  # source://grape//lib/grape/validations/types.rb#125
  def map_special(type); end

  # Is the declared type in fact an array of multiple allowed types?
  # For example the declaration +types: [Integer,String]+ will attempt
  # first to coerce given values to integer, but will also accept any
  # other string.
  #
  # @param type [Array<Class>, Set<Class>] type (or type list!) to check
  # @return [Boolean] +true+ if the given value will be treated as
  #   a list of types.
  #
  # source://grape//lib/grape/validations/types.rb#77
  def multiple?(type); end

  # Is the given class a primitive type as recognized by Grape?
  #
  # @param type [Class] type to check
  # @return [Boolean] whether or not the type is known by Grape as a valid
  #   type for a single value
  #
  # source://grape//lib/grape/validations/types.rb#55
  def primitive?(type); end

  # Does Grape provide special coercion and validation
  # routines for the given class? This does not include
  # automatic handling for primitives, structures and
  # otherwise recognized types. See {Types::SPECIAL}.
  #
  # @param type [Class] type to check
  # @return [Boolean] +true+ if special routines are available
  #
  # source://grape//lib/grape/validations/types.rb#88
  def special?(type); end

  # Is the given class a standard data structure (collection or map)
  # as recognized by Grape?
  #
  # @param type [Class] type to check
  # @return [Boolean] whether or not the type is known by Grape as a valid
  #   data structure type
  #
  # source://grape//lib/grape/validations/types.rb#65
  def structure?(type); end

  class << self
    # Chooses the best coercer for the given type. For example, if the type
    # is Integer, it will return a coercer which will be able to coerce a value
    # to the integer.
    #
    # There are a few very special coercers which might be returned.
    #
    # +Grape::Types::MultipleTypeCoercer+ is a coercer which is returned when
    # the given type implies values in an array with different types.
    # For example, +[Integer, String]+ allows integer and string values in
    # an array.
    #
    # +Grape::Types::CustomTypeCoercer+ is a coercer which is returned when
    # a method is specified by a user with +coerce_with+ option or the user
    # specifies a custom type which implements requirments of
    # +Grape::Types::CustomTypeCoercer+.
    #
    # +Grape::Types::CustomTypeCollectionCoercer+ is a very similar to the
    # previous one, but it expects an array or set of values having a custom
    # type implemented by the user.
    #
    # There is also a group of custom types implemented by Grape, check
    # +Grape::Validations::Types::SPECIAL+ to get the full list.
    #
    # @param type [Class] the type to which input strings
    #   should be coerced
    # @param method [Class, #call] the coercion method to use
    # @return [Object] object to be used
    #   for coercion and type validation
    #
    # source://grape//lib/grape/validations/types.rb#157
    def build_coercer(type, method: T.unsafe(nil), strict: T.unsafe(nil)); end

    # source://grape//lib/grape/validations/types.rb#187
    def cache_instance(type, method, strict, &_block); end

    # source://grape//lib/grape/validations/types.rb#201
    def cache_key(type, method, strict); end

    # Is the declared type an +Array+ or +Set+ of a {#custom?} type?
    #
    # @param type [Array<Class>, Class] type to check
    # @return [Boolean] true if +type+ is a collection of a type that implements
    #   its own +#parse+ method.
    #
    # source://grape//lib/grape/validations/types.rb#119
    def collection_of_custom?(type); end

    # source://grape//lib/grape/validations/types.rb#163
    def create_coercer_instance(type, method, strict); end

    # A valid custom type must implement a class-level `parse` method, taking
    # one String argument and returning the parsed value in its correct type.
    #
    # @param type [Class] type to check
    # @return [Boolean] whether or not the type can be used as a custom type
    #
    # source://grape//lib/grape/validations/types.rb#106
    def custom?(type); end

    # Is the declared type a supported group type?
    # Currently supported group types are Array, Hash, JSON, and Array[JSON]
    #
    # @param type [Array<Class>, Class] type to check
    # @return [Boolean] +true+ if the type is a supported group type
    #
    # source://grape//lib/grape/validations/types.rb#97
    def group?(type); end

    # source://grape//lib/grape/validations/types.rb#125
    def map_special(type); end

    # Is the declared type in fact an array of multiple allowed types?
    # For example the declaration +types: [Integer,String]+ will attempt
    # first to coerce given values to integer, but will also accept any
    # other string.
    #
    # @param type [Array<Class>, Set<Class>] type (or type list!) to check
    # @return [Boolean] +true+ if the given value will be treated as
    #   a list of types.
    #
    # source://grape//lib/grape/validations/types.rb#77
    def multiple?(type); end

    # Is the given class a primitive type as recognized by Grape?
    #
    # @param type [Class] type to check
    # @return [Boolean] whether or not the type is known by Grape as a valid
    #   type for a single value
    #
    # source://grape//lib/grape/validations/types.rb#55
    def primitive?(type); end

    # Does Grape provide special coercion and validation
    # routines for the given class? This does not include
    # automatic handling for primitives, structures and
    # otherwise recognized types. See {Types::SPECIAL}.
    #
    # @param type [Class] type to check
    # @return [Boolean] +true+ if special routines are available
    #
    # source://grape//lib/grape/validations/types.rb#88
    def special?(type); end

    # Is the given class a standard data structure (collection or map)
    # as recognized by Grape?
    #
    # @param type [Class] type to check
    # @return [Boolean] whether or not the type is known by Grape as a valid
    #   data structure type
    #
    # source://grape//lib/grape/validations/types.rb#65
    def structure?(type); end
  end
end

# Coerces elements in an array. It might be an array of strings or integers or
# an array of arrays of integers.
#
# It could've been possible to use an +of+
# method (https://dry-rb.org/gems/dry-types/1.2/array-with-member/)
# provided by dry-types. Unfortunately, it doesn't work for Grape because of
# behavior of Virtus which was used earlier, a `Grape::Validations::Types::PrimitiveCoercer`
# maintains Virtus behavior in coercing.
#
# source://grape//lib/grape/validations/types/array_coercer.rb#14
class Grape::Validations::Types::ArrayCoercer < ::Grape::Validations::Types::DryTypeCoercer
  # @return [ArrayCoercer] a new instance of ArrayCoercer
  #
  # source://grape//lib/grape/validations/types/array_coercer.rb#15
  def initialize(type, strict = T.unsafe(nil)); end

  # source://grape//lib/grape/validations/types/array_coercer.rb#22
  def call(_val); end

  protected

  # source://grape//lib/grape/validations/types/array_coercer.rb#33
  def coerce_elements(collection); end

  # source://grape//lib/grape/validations/types/array_coercer.rb#55
  def elem_coercer; end

  # This method maintains logic which was defined by Virtus for arrays.
  # Virtus doesn't allow nil in arrays.
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/types/array_coercer.rb#51
  def reject?(val); end

  # Returns the value of attribute subtype.
  #
  # source://grape//lib/grape/validations/types/array_coercer.rb#31
  def subtype; end
end

# source://grape//lib/grape/validations/types/build_coercer.rb#6
module Grape::Validations::Types::BuildCoercer
  class << self
    # Chooses the best coercer for the given type. For example, if the type
    # is Integer, it will return a coercer which will be able to coerce a value
    # to the integer.
    #
    # There are a few very special coercers which might be returned.
    #
    # +Grape::Types::MultipleTypeCoercer+ is a coercer which is returned when
    # the given type implies values in an array with different types.
    # For example, +[Integer, String]+ allows integer and string values in
    # an array.
    #
    # +Grape::Types::CustomTypeCoercer+ is a coercer which is returned when
    # a method is specified by a user with +coerce_with+ option or the user
    # specifies a custom type which implements requirments of
    # +Grape::Types::CustomTypeCoercer+.
    #
    # +Grape::Types::CustomTypeCollectionCoercer+ is a very similar to the
    # previous one, but it expects an array or set of values having a custom
    # type implemented by the user.
    #
    # There is also a group of custom types implemented by Grape, check
    # +Grape::Validations::Types::SPECIAL+ to get the full list.
    #
    # @param type [Class] the type to which input strings
    #   should be coerced
    # @param method [Class, #call] the coercion method to use
    # @return [Object] object to be used
    #   for coercion and type validation
    #
    # source://grape//lib/grape/validations/types/build_coercer.rb#35
    def build_coercer(type, method: T.unsafe(nil), strict: T.unsafe(nil)); end

    # source://grape//lib/grape/validations/types/build_coercer.rb#65
    def cache_instance(type, method, strict, &_block); end

    # source://grape//lib/grape/validations/types/build_coercer.rb#79
    def cache_key(type, method, strict); end

    # source://grape//lib/grape/validations/types/build_coercer.rb#41
    def create_coercer_instance(type, method, strict); end
  end
end

# This class will detect type classes that implement
# a class-level +parse+ method. The method should accept one
# +String+ argument and should return the value coerced to
# the appropriate type. The method may raise an exception if
# there are any problems parsing the string.
#
# Alternately an optional +method+ may be supplied (see the
# +coerce_with+ option of {Grape::Dsl::Parameters#requires}).
# This may be any class or object implementing +parse+ or +call+,
# with the same contract as described above.
#
# Type Checking
# -------------
#
# Calls to +coerced?+ will consult this class to check
# that the coerced value produced above is in fact of the
# expected type. By default this class performs a basic check
# against the type supplied, but this behaviour will be
# overridden if the class implements a class-level
# +coerced?+ or +parsed?+ method. This method
# will receive a single parameter that is the coerced value
# and should return +true+ if the value meets type expectations.
# Arbitrary assertions may be made here but the grape validation
# system should be preferred.
#
# Alternately a proc or other object responding to +call+ may be
# supplied in place of a type. This should implement the same
# contract as +coerced?+, and must be supplied with a coercion
# +method+.
#
# source://grape//lib/grape/validations/types/custom_type_coercer.rb#35
class Grape::Validations::Types::CustomTypeCoercer
  # A new coercer for the given type specification
  # and coercion method.
  #
  # @param type [Class, #coerced?, #parsed?, #call?] specifier for the target type. See class docs.
  # @param method [#parse, #call] optional coercion method. See class docs.
  # @return [CustomTypeCoercer] a new instance of CustomTypeCoercer
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#43
  def initialize(type, method = T.unsafe(nil)); end

  # Coerces the given value.
  #
  # @param value [String] value to be coerced, in grape
  #   this should always be a string.
  # @return [Object] the coerced result
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#54
  def call(val); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#63
  def coerced?(val); end

  private

  # Enforce symbolized keys for complex types
  # by wrapping the coercion method such that
  # any Hash objects in the immediate heirarchy
  # have their keys recursively symbolized.
  # This helps common libs such as JSON to work easily.
  #
  # @param type see #new
  # @param method see #infer_coercion_method
  # @return [#call] +method+ wrapped in an additional
  #   key-conversion step, or just returns +method+
  #   itself if no conversion is deemed to be
  #   necessary.
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#138
  def enforce_symbolized_keys(type, method); end

  # Determine the coercion method we're expected to use
  # based on the parameters given.
  #
  # @param type see #new
  # @param method see #new
  # @return [#call] coercion method
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#75
  def infer_coercion_method(type, method); end

  # Determine how the type validity of a coerced
  # value should be decided.
  #
  # @param type see #new
  # @return [#call] a procedure which accepts a single parameter
  #   and returns +true+ if the passed object is of the correct type.
  #
  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#95
  def infer_type_check(type); end

  # source://grape//lib/grape/validations/types/custom_type_coercer.rb#118
  def recursive_type_check(type, value); end
end

# See {CustomTypeCoercer} for details on types
# that will be supported by this by this coercer.
# This coercer works in the same way as +CustomTypeCoercer+
# except that it expects to receive an array of strings to
# coerce and will return an array (or optionally, a set)
# of coerced values.
#
# +CustomTypeCoercer+ is already capable of providing type
# checking for arrays where an independent coercion method
# is supplied. As such, +CustomTypeCollectionCoercer+ does
# not allow for such a method to be supplied independently
# of the type.
#
# source://grape//lib/grape/validations/types/custom_type_collection_coercer.rb#18
class Grape::Validations::Types::CustomTypeCollectionCoercer < ::Grape::Validations::Types::CustomTypeCoercer
  # A new coercer for collections of the given type.
  #
  # @param type [Class, #parse] type to which items in the array should be coerced.
  #   Must implement a +parse+ method which accepts a string,
  #   and for the purposes of type-checking it may either be
  #   a class, or it may implement a +coerced?+, +parsed?+ or
  #   +call+ method (in that order of precedence) which
  #   accepts a single argument and returns true if the given
  #   array item has been coerced correctly.
  # @param set [Boolean] when true, a +Set+ will be returned by {#call} instead
  #   of an +Array+ and duplicate items will be discarded.
  # @return [CustomTypeCollectionCoercer] a new instance of CustomTypeCollectionCoercer
  #
  # source://grape//lib/grape/validations/types/custom_type_collection_coercer.rb#32
  def initialize(type, set = T.unsafe(nil)); end

  # Coerces the given value.
  #
  # @param value [Array<String>] an array of values to be coerced
  # @return [Array, Set] the coerced result. May be an +Array+ or a
  #   +Set+ depending on the setting given to the constructor
  #
  # source://grape//lib/grape/validations/types/custom_type_collection_coercer.rb#42
  def call(value); end
end

# A base class for classes which must identify a coercer to be used.
# If the +strict+ argument is true, it won't coerce the given value
# but check its type. More information there
# https://dry-rb.org/gems/dry-types/1.2/built-in-types/
#
# source://grape//lib/grape/validations/types/dry_type_coercer.rb#17
class Grape::Validations::Types::DryTypeCoercer
  # @return [DryTypeCoercer] a new instance of DryTypeCoercer
  #
  # source://grape//lib/grape/validations/types/dry_type_coercer.rb#38
  def initialize(type, strict = T.unsafe(nil)); end

  # Coerces the given value to a type which was specified during
  # initialization as a type argument.
  #
  # @param val [Object]
  #
  # source://grape//lib/grape/validations/types/dry_type_coercer.rb#48
  def call(val); end

  protected

  # Returns the value of attribute scope.
  #
  # source://grape//lib/grape/validations/types/dry_type_coercer.rb#58
  def scope; end

  # Returns the value of attribute strict.
  #
  # source://grape//lib/grape/validations/types/dry_type_coercer.rb#58
  def strict; end

  # Returns the value of attribute type.
  #
  # source://grape//lib/grape/validations/types/dry_type_coercer.rb#58
  def type; end

  class << self
    # Returns an instance of a coercer for a given type
    #
    # source://grape//lib/grape/validations/types/dry_type_coercer.rb#29
    def coercer_instance_for(type, strict = T.unsafe(nil)); end

    # Returns a collection coercer which corresponds to a given type.
    # Example:
    #
    #    collection_coercer_for(Array)
    #    #=> Grape::Validations::Types::ArrayCoercer
    #
    # source://grape//lib/grape/validations/types/dry_type_coercer.rb#24
    def collection_coercer_for(type); end
  end
end

# Implementation for parameters that are multipart file objects.
# Actual handling of these objects is provided by +Rack::Request+;
# this class is here only to assert that rack's handling has succeeded.
#
# source://grape//lib/grape/validations/types/file.rb#9
class Grape::Validations::Types::File
  class << self
    # source://grape//lib/grape/validations/types/file.rb#11
    def parse(input); end

    # @return [Boolean]
    #
    # source://grape//lib/grape/validations/types/file.rb#21
    def parsed?(value); end
  end
end

# source://grape//lib/grape/validations/types.rb#48
Grape::Validations::Types::GROUPS = T.let(T.unsafe(nil), Array)

# Instances of this class may be used as tokens to denote that a parameter value could not be
# coerced. The given message will be used as a validation error.
#
# source://grape//lib/grape/validations/types/invalid_value.rb#8
class Grape::Validations::Types::InvalidValue
  # @return [InvalidValue] a new instance of InvalidValue
  #
  # source://grape//lib/grape/validations/types/invalid_value.rb#11
  def initialize(message = T.unsafe(nil)); end

  # Returns the value of attribute message.
  #
  # source://grape//lib/grape/validations/types/invalid_value.rb#9
  def message; end
end

# Handles coercion and type checking for parameters that are complex
# types given as JSON-encoded strings. It accepts both JSON objects
# and arrays of objects, and will coerce the input to a +Hash+
# or +Array+ object respectively. In either case the Grape
# validation system will apply nested validation rules to
# all returned objects.
#
# source://grape//lib/grape/validations/types/json.rb#12
class Grape::Validations::Types::Json
  class << self
    # Coerce the input into a JSON-like data structure.
    #
    # @param input [String] a JSON-encoded parameter value
    # @return [Hash, Array<Hash>, nil]
    #
    # source://grape//lib/grape/validations/types/json.rb#18
    def parse(input); end

    # Checks that the input was parsed successfully
    # and isn't something odd such as an array of primitives.
    #
    # @param value [Object] result of {#parse}
    # @return [true, false]
    #
    # source://grape//lib/grape/validations/types/json.rb#32
    def parsed?(value); end

    protected

    # Is the value an array of JSON-like objects?
    #
    # @param value [Object] result of {#parse}
    # @return [true, false]
    #
    # source://grape//lib/grape/validations/types/json.rb#42
    def coerced_collection?(value); end
  end
end

# Specialization of the {Json} attribute that is guaranteed
# to return an array of objects. Accepts both JSON-encoded
# objects and arrays of objects, but wraps single objects
# in an Array.
#
# source://grape//lib/grape/validations/types/json.rb#52
class Grape::Validations::Types::JsonArray < ::Grape::Validations::Types::Json
  class << self
    # See {Json#parse}. Wraps single objects in an array.
    #
    # @param input [String] JSON-encoded parameter value
    # @return [Array<Hash>]
    #
    # source://grape//lib/grape/validations/types/json.rb#58
    def parse(input); end

    # See {Json#coerced_collection?}
    #
    # @return [Boolean]
    #
    # source://grape//lib/grape/validations/types/json.rb#64
    def parsed?(value); end
  end
end

# This class is intended for use with Grape endpoint parameters that
# have been declared to be of variant-type using the +:types+ option.
# +MultipleTypeCoercer+ will build a coercer for each type declared
# in the array passed to +:types+ using {Types.build_coercer}. It will
# apply these coercers to parameter values in the order given to
# +:types+, and will return the value returned by the first coercer
# to successfully coerce the parameter value. Therefore if +String+ is
# an allowed type it should be declared last, since it will always
# successfully "coerce" the value.
#
# source://grape//lib/grape/validations/types/multiple_type_coercer.rb#15
class Grape::Validations::Types::MultipleTypeCoercer
  # Construct a new coercer that will attempt to coerce
  # values to the given list of types in the given order.
  #
  # @param types [Array<Class>] list of allowed types
  # @param method [#call, #parse] method by which values should be
  #   coerced. See class docs for default behaviour.
  # @return [MultipleTypeCoercer] a new instance of MultipleTypeCoercer
  #
  # source://grape//lib/grape/validations/types/multiple_type_coercer.rb#22
  def initialize(types, method = T.unsafe(nil)); end

  # Coerces the given value.
  #
  # @param val [String] value to be coerced, in grape
  #   this should always be a string.
  # @return [Object, InvalidValue] the coerced result, or an instance
  #   of {InvalidValue} if the value could not be coerced.
  #
  # source://grape//lib/grape/validations/types/multiple_type_coercer.rb#40
  def call(val); end
end

# source://grape//lib/grape/validations/types.rb#18
Grape::Validations::Types::PRIMITIVES = T.let(T.unsafe(nil), Array)

# Coerces the given value to a type defined via a +type+ argument during
# initialization. When +strict+ is true, it doesn't coerce a value but check
# that it has the proper type.
#
# source://grape//lib/grape/validations/types/primitive_coercer.rb#9
class Grape::Validations::Types::PrimitiveCoercer < ::Grape::Validations::Types::DryTypeCoercer
  # @return [PrimitiveCoercer] a new instance of PrimitiveCoercer
  #
  # source://grape//lib/grape/validations/types/primitive_coercer.rb#29
  def initialize(type, strict = T.unsafe(nil)); end

  # source://grape//lib/grape/validations/types/primitive_coercer.rb#43
  def call(val); end

  protected

  # This method maintains logic which was defined by Virtus. For example,
  # dry-types is ok to convert an array or a hash to a string, it is supported,
  # but Virtus wouldn't accept it. So, this method only exists to not introduce
  # breaking changes.
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/types/primitive_coercer.rb#58
  def reject?(val); end

  # Dry-Types treats an empty string as invalid. However, Grape considers an empty string as
  # absence of a value and coerces it into nil. See a discussion there
  # https://github.com/ruby-grape/grape/pull/2045
  #
  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/types/primitive_coercer.rb#67
  def treat_as_nil?(val); end

  # Returns the value of attribute type.
  #
  # source://grape//lib/grape/validations/types/primitive_coercer.rb#52
  def type; end
end

# source://grape//lib/grape/validations/types/primitive_coercer.rb#10
Grape::Validations::Types::PrimitiveCoercer::MAPPING = T.let(T.unsafe(nil), Hash)

# source://grape//lib/grape/validations/types/primitive_coercer.rb#21
Grape::Validations::Types::PrimitiveCoercer::STRICT_MAPPING = T.let(T.unsafe(nil), Hash)

# source://grape//lib/grape/validations/types.rb#41
Grape::Validations::Types::SPECIAL = T.let(T.unsafe(nil), Hash)

# Types representing data structures.
#
# source://grape//lib/grape/validations/types.rb#39
Grape::Validations::Types::STRUCTURES = T.let(T.unsafe(nil), Array)

# Takes the given array and converts it to a set. Every element of the set
# is also coerced.
#
# source://grape//lib/grape/validations/types/set_coercer.rb#8
class Grape::Validations::Types::SetCoercer < ::Grape::Validations::Types::ArrayCoercer
  # @return [SetCoercer] a new instance of SetCoercer
  #
  # source://grape//lib/grape/validations/types/set_coercer.rb#9
  def initialize(type, strict = T.unsafe(nil)); end

  # source://grape//lib/grape/validations/types/set_coercer.rb#15
  def call(value); end

  protected

  # source://grape//lib/grape/validations/types/set_coercer.rb#23
  def coerce_elements(collection); end
end

# This class wraps {MultipleTypeCoercer}, for use with collections
# that allow members of more than one type.
#
# source://grape//lib/grape/validations/types/variant_collection_coercer.rb#8
class Grape::Validations::Types::VariantCollectionCoercer
  # Construct a new coercer that will attempt to coerce
  # a list of values such that all members are of one of
  # the given types. The container may also optionally be
  # coerced to a +Set+. An arbitrary coercion +method+ may
  # be supplied, which will be passed the entire collection
  # as a parameter and should return a new collection, or
  # may return the same one if no coercion was required.
  #
  # @param types [Array<Class>, Set<Class>] list of allowed types,
  #   also specifying the container type
  # @param method [#call, #parse] method by which values should be coerced
  # @return [VariantCollectionCoercer] a new instance of VariantCollectionCoercer
  #
  # source://grape//lib/grape/validations/types/variant_collection_coercer.rb#20
  def initialize(types, method = T.unsafe(nil)); end

  # Coerce the given value.
  #
  # @param value [Array<String>] collection of values to be coerced
  # @return [Array<Object>, Set<Object>, InvalidValue] the coerced result, or an instance
  #   of {InvalidValue} if the value could not be coerced.
  #
  # source://grape//lib/grape/validations/types/variant_collection_coercer.rb#35
  def call(value); end
end

# source://grape//lib/grape/validations/validator_factory.rb#5
class Grape::Validations::ValidatorFactory
  class << self
    # source://grape//lib/grape/validations/validator_factory.rb#6
    def create_validator(**options); end
  end
end

# source://grape//lib/grape.rb#0
module Grape::Validations::Validators; end

# source://grape//lib/grape/validations/validators/all_or_none_of_validator.rb#6
class Grape::Validations::Validators::AllOrNoneOfValidator < ::Grape::Validations::Validators::MultipleParamsBase
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/all_or_none_of_validator.rb#7
  def validate_params!(params); end
end

# source://grape//lib/grape/validations/validators/allow_blank_validator.rb#6
class Grape::Validations::Validators::AllowBlankValidator < ::Grape::Validations::Validators::Base
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/allow_blank_validator.rb#7
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/as_validator.rb#6
class Grape::Validations::Validators::AsValidator < ::Grape::Validations::Validators::Base
  # We use a validator for renaming parameters. This is just a marker for
  # the parameter scope to handle the renaming. No actual validation
  # happens here.
  #
  # source://grape//lib/grape/validations/validators/as_validator.rb#10
  def validate_param!(*_arg0); end
end

# source://grape//lib/grape/validations/validators/at_least_one_of_validator.rb#6
class Grape::Validations::Validators::AtLeastOneOfValidator < ::Grape::Validations::Validators::MultipleParamsBase
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/at_least_one_of_validator.rb#7
  def validate_params!(params); end
end

# source://grape//lib/grape/validations/validators/base.rb#6
class Grape::Validations::Validators::Base
  # Creates a new Validator from options specified
  # by a +requires+ or +optional+ directive during
  # parameter definition.
  #
  # @param attrs [Array] names of attributes to which the Validator applies
  # @param options [Object] implementation-dependent Validator options
  # @param required [Boolean] attribute(s) are required or optional
  # @param scope [ParamsScope] parent scope for this Validator
  # @param opts [Array] additional validation options
  # @return [Base] a new instance of Base
  #
  # source://grape//lib/grape/validations/validators/base.rb#17
  def initialize(attrs, options, required, scope, *opts); end

  # Returns the value of attribute attrs.
  #
  # source://grape//lib/grape/validations/validators/base.rb#7
  def attrs; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/validators/base.rb#79
  def fail_fast?; end

  # source://grape//lib/grape/validations/validators/base.rb#69
  def message(default_key = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/validators/base.rb#74
  def options_key?(key, options = T.unsafe(nil)); end

  # Validates a given request.
  #
  # @note Override #validate! unless you need to access the entire request.
  # @param request [Grape::Request] the request currently being handled
  # @raise [Grape::Exceptions::Validation] if validation failed
  # @return [void]
  #
  # source://grape//lib/grape/validations/validators/base.rb#32
  def validate(request); end

  # Validates a given parameter hash.
  #
  # @note Override #validate if you need to access the entire request.
  # @param params [Hash] parameters to validate
  # @raise [Grape::Exceptions::Validation] if validation failed
  # @return [void]
  #
  # source://grape//lib/grape/validations/validators/base.rb#43
  def validate!(params); end

  class << self
    # @private
    #
    # source://grape//lib/grape/validations/validators/base.rb#61
    def inherited(klass); end
  end
end

# source://grape//lib/grape/validations/validators/coerce_validator.rb#6
class Grape::Validations::Validators::CoerceValidator < ::Grape::Validations::Validators::Base
  # @return [CoerceValidator] a new instance of CoerceValidator
  #
  # source://grape//lib/grape/validations/validators/coerce_validator.rb#7
  def initialize(attrs, options, required, scope, **opts); end

  # source://grape//lib/grape/validations/validators/coerce_validator.rb#17
  def validate_param!(attr_name, params); end

  private

  # source://grape//lib/grape/validations/validators/coerce_validator.rb#52
  def coerce_value(val); end

  # Object that will be used for parameter coercion and type checking.
  #
  # See {Types.build_coercer}
  #
  # @return [Object]
  #
  # source://grape//lib/grape/validations/validators/coerce_validator.rb#46
  def converter; end

  # Type to which the parameter will be coerced.
  #
  # @return [Class]
  #
  # source://grape//lib/grape/validations/validators/coerce_validator.rb#62
  def type; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/validators/coerce_validator.rb#48
  def valid_type?(val); end

  # source://grape//lib/grape/validations/validators/coerce_validator.rb#66
  def validation_exception(attr_name, custom_msg = T.unsafe(nil)); end
end

# source://grape//lib/grape/validations/validators/default_validator.rb#6
class Grape::Validations::Validators::DefaultValidator < ::Grape::Validations::Validators::Base
  # @return [DefaultValidator] a new instance of DefaultValidator
  #
  # source://grape//lib/grape/validations/validators/default_validator.rb#7
  def initialize(attrs, options, required, scope, **opts); end

  # source://grape//lib/grape/validations/validators/default_validator.rb#26
  def validate!(params); end

  # source://grape//lib/grape/validations/validators/default_validator.rb#12
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/exactly_one_of_validator.rb#6
class Grape::Validations::Validators::ExactlyOneOfValidator < ::Grape::Validations::Validators::MultipleParamsBase
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/exactly_one_of_validator.rb#7
  def validate_params!(params); end
end

# source://grape//lib/grape/validations/validators/except_values_validator.rb#6
class Grape::Validations::Validators::ExceptValuesValidator < ::Grape::Validations::Validators::Base
  # @return [ExceptValuesValidator] a new instance of ExceptValuesValidator
  #
  # source://grape//lib/grape/validations/validators/except_values_validator.rb#7
  def initialize(attrs, options, required, scope, **opts); end

  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/except_values_validator.rb#12
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/length_validator.rb#6
class Grape::Validations::Validators::LengthValidator < ::Grape::Validations::Validators::Base
  # @raise [ArgumentError]
  # @return [LengthValidator] a new instance of LengthValidator
  #
  # source://grape//lib/grape/validations/validators/length_validator.rb#7
  def initialize(attrs, options, required, scope, **opts); end

  # source://grape//lib/grape/validations/validators/length_validator.rb#28
  def build_message; end

  # @raise [ArgumentError]
  #
  # source://grape//lib/grape/validations/validators/length_validator.rb#18
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/multiple_params_base.rb#6
class Grape::Validations::Validators::MultipleParamsBase < ::Grape::Validations::Validators::Base
  # @raise [Grape::Exceptions::ValidationArrayErrors]
  #
  # source://grape//lib/grape/validations/validators/multiple_params_base.rb#7
  def validate!(params); end

  private

  # source://grape//lib/grape/validations/validators/multiple_params_base.rb#28
  def all_keys; end

  # source://grape//lib/grape/validations/validators/multiple_params_base.rb#22
  def keys_in_common(resource_params); end
end

# source://grape//lib/grape/validations/validators/mutual_exclusion_validator.rb#6
class Grape::Validations::Validators::MutualExclusionValidator < ::Grape::Validations::Validators::MultipleParamsBase
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/mutual_exclusion_validator.rb#7
  def validate_params!(params); end
end

# source://grape//lib/grape/validations/validators/presence_validator.rb#6
class Grape::Validations::Validators::PresenceValidator < ::Grape::Validations::Validators::Base
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/presence_validator.rb#7
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/regexp_validator.rb#6
class Grape::Validations::Validators::RegexpValidator < ::Grape::Validations::Validators::Base
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/regexp_validator.rb#7
  def validate_param!(attr_name, params); end
end

# source://grape//lib/grape/validations/validators/same_as_validator.rb#6
class Grape::Validations::Validators::SameAsValidator < ::Grape::Validations::Validators::Base
  # @raise [Grape::Exceptions::Validation]
  #
  # source://grape//lib/grape/validations/validators/same_as_validator.rb#7
  def validate_param!(attr_name, params); end

  private

  # source://grape//lib/grape/validations/validators/same_as_validator.rb#19
  def build_message; end
end

# source://grape//lib/grape/validations/validators/values_validator.rb#6
class Grape::Validations::Validators::ValuesValidator < ::Grape::Validations::Validators::Base
  # @return [ValuesValidator] a new instance of ValuesValidator
  #
  # source://grape//lib/grape/validations/validators/values_validator.rb#7
  def initialize(attrs, options, required, scope, **opts); end

  # source://grape//lib/grape/validations/validators/values_validator.rb#27
  def validate_param!(attr_name, params); end

  private

  # source://grape//lib/grape/validations/validators/values_validator.rb#64
  def check_excepts(param_array); end

  # source://grape//lib/grape/validations/validators/values_validator.rb#51
  def check_values(param_array, attr_name); end

  # source://grape//lib/grape/validations/validators/values_validator.rb#82
  def except_message; end

  # @return [Boolean]
  #
  # source://grape//lib/grape/validations/validators/values_validator.rb#87
  def required_for_root_scope?; end

  # source://grape//lib/grape/validations/validators/values_validator.rb#71
  def validate_proc(proc, param_array); end

  # source://grape//lib/grape/validations/validators/values_validator.rb#96
  def validation_exception(attr_name, message); end
end

# source://grape//lib/grape/xml.rb#7
Grape::Xml = ActiveSupport::XmlMini
