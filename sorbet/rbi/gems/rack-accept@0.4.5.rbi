# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-accept` gem.
# Please instead update this file by running `bin/tapioca gem rack-accept`.


# HTTP Accept* for Ruby/Rack.
#
# http://mjijackson.com/rack-accept
#
# source://rack-accept//lib/rack/accept.rb#6
module Rack::Accept
  class << self
    # Enables Rack::Accept to be used as a Rack middleware.
    #
    # source://rack-accept//lib/rack/accept.rb#8
    def new(app, &block); end
  end
end

# Represents an HTTP Accept-Charset header according to the HTTP 1.1
# specification, and provides several convenience methods for determining
# acceptable character sets.
#
# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2
#
# source://rack-accept//lib/rack/accept/charset.rb#7
class Rack::Accept::Charset
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  # Returns an array of character sets from this header that match the given
  # +charset+, ordered by precedence.
  #
  # source://rack-accept//lib/rack/accept/charset.rb#27
  def matches(charset); end

  # The name of this header.
  #
  # source://rack-accept//lib/rack/accept/charset.rb#11
  def name; end

  # Determines the quality factor (qvalue) of the given +charset+.
  #
  # source://rack-accept//lib/rack/accept/charset.rb#16
  def qvalue(charset); end
end

# Implements the Rack middleware interface.
#
# source://rack-accept//lib/rack/accept/context.rb#3
class Rack::Accept::Context
  # @return [Context] a new instance of Context
  # @yield [_self]
  # @yieldparam _self [Rack::Accept::Context] the object that the method was called on
  #
  # source://rack-accept//lib/rack/accept/context.rb#10
  def initialize(app); end

  # Returns the value of attribute app.
  #
  # source://rack-accept//lib/rack/accept/context.rb#8
  def app; end

  # Inserts a new Rack::Accept::Request object into the environment before
  # handing the request to the app immediately downstream.
  #
  # source://rack-accept//lib/rack/accept/context.rb#19
  def call(env); end

  # Defines the character sets this server is able to serve.
  #
  # source://rack-accept//lib/rack/accept/context.rb#35
  def charsets=(charsets); end

  # Defines the types of encodings this server is able to serve.
  #
  # source://rack-accept//lib/rack/accept/context.rb#40
  def encodings=(encodings); end

  # Defines the languages this server is able to serve.
  #
  # source://rack-accept//lib/rack/accept/context.rb#45
  def languages=(languages); end

  # Defines the types of media this server is able to serve.
  #
  # source://rack-accept//lib/rack/accept/context.rb#30
  def media_types=(media_types); end

  private

  # source://rack-accept//lib/rack/accept/context.rb#51
  def add_check(header_name, values); end

  # Raises an AcceptError if this server is not able to serve an acceptable
  # response.
  #
  # source://rack-accept//lib/rack/accept/context.rb#59
  def check!(request); end
end

# This error is raised when the server is not able to provide an acceptable
# response.
#
# source://rack-accept//lib/rack/accept/context.rb#6
class Rack::Accept::Context::AcceptError < ::StandardError; end

# Represents an HTTP Accept-Encoding header according to the HTTP 1.1
# specification, and provides several convenience methods for determining
# acceptable content encodings.
#
# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3
#
# source://rack-accept//lib/rack/accept/encoding.rb#7
class Rack::Accept::Encoding
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  # Returns an array of encodings from this header that match the given
  # +encoding+, ordered by precedence.
  #
  # source://rack-accept//lib/rack/accept/encoding.rb#27
  def matches(encoding); end

  # The name of this header.
  #
  # source://rack-accept//lib/rack/accept/encoding.rb#11
  def name; end

  # Determines the quality factor (qvalue) of the given +encoding+.
  #
  # source://rack-accept//lib/rack/accept/encoding.rb#16
  def qvalue(encoding); end
end

# Contains methods that are useful for working with Accept-style HTTP
# headers. The MediaType, Charset, Encoding, and Language classes all mixin
# this module.
#
# source://rack-accept//lib/rack/accept/header.rb#5
module Rack::Accept::Header
  include ::Rack::Accept::Header::PublicInstanceMethods

  private

  # Returns a string suitable for use as the value of an Accept-style HTTP
  # header from the map of acceptable values to their respective quality
  # factors (qvalues). The +parse+ method may be used on the resulting string
  # to obtain a hash that is the equivalent of the one provided.
  #
  # source://rack-accept//lib/rack/accept/header.rb#31
  def join(qvalues); end

  # Converts 1.0 and 0.0 qvalues to 1 and 0 respectively. Used to maintain
  # consistency across qvalue methods.
  #
  # source://rack-accept//lib/rack/accept/header.rb#59
  def normalize_qvalue(q); end

  # Parses the value of an Accept-style request header into a hash of
  # acceptable values and their respective quality factors (qvalues). The
  # +join+ method may be used on the resulting hash to obtain a header
  # string that is the semantic equivalent of the one provided.
  #
  # source://rack-accept//lib/rack/accept/header.rb#10
  def parse(header); end

  # Parses a media type string into its relevant pieces. The return value
  # will be an array with three values: 1) the content type, 2) the content
  # subtype, and 3) the media type parameters. An empty array is returned if
  # no match can be made.
  #
  # source://rack-accept//lib/rack/accept/header.rb#40
  def parse_media_type(media_type); end

  # Parses a string of media type range parameters into a hash of parameters
  # to their respective values.
  #
  # source://rack-accept//lib/rack/accept/header.rb#48
  def parse_range_params(params); end

  class << self
    # Returns a string suitable for use as the value of an Accept-style HTTP
    # header from the map of acceptable values to their respective quality
    # factors (qvalues). The +parse+ method may be used on the resulting string
    # to obtain a hash that is the equivalent of the one provided.
    #
    # source://rack-accept//lib/rack/accept/header.rb#31
    def join(qvalues); end

    # Converts 1.0 and 0.0 qvalues to 1 and 0 respectively. Used to maintain
    # consistency across qvalue methods.
    #
    # source://rack-accept//lib/rack/accept/header.rb#59
    def normalize_qvalue(q); end

    # Parses the value of an Accept-style request header into a hash of
    # acceptable values and their respective quality factors (qvalues). The
    # +join+ method may be used on the resulting hash to obtain a header
    # string that is the semantic equivalent of the one provided.
    #
    # source://rack-accept//lib/rack/accept/header.rb#10
    def parse(header); end

    # Parses a media type string into its relevant pieces. The return value
    # will be an array with three values: 1) the content type, 2) the content
    # subtype, and 3) the media type parameters. An empty array is returned if
    # no match can be made.
    #
    # source://grape/2.0.0/lib/grape/middleware/versioner/parse_media_type_patch.rb#10
    def parse_media_type(media_type); end

    # Parses a string of media type range parameters into a hash of parameters
    # to their respective values.
    #
    # source://rack-accept//lib/rack/accept/header.rb#48
    def parse_range_params(params); end
  end
end

# source://rack-accept//lib/rack/accept/header.rb#64
module Rack::Accept::Header::PublicInstanceMethods
  # source://rack-accept//lib/rack/accept/header.rb#69
  def initialize(header = T.unsafe(nil)); end

  # Determines if the given +value+ is acceptable (does not have a qvalue
  # of 0) according to this header.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/header.rb#97
  def accept?(value); end

  # A shortcut for retrieving the first result of #sort.
  #
  # source://rack-accept//lib/rack/accept/header.rb#135
  def best_of(values, keep_unacceptables = T.unsafe(nil)); end

  # The name of this header. Should be overridden in classes that mixin
  # this module.
  #
  # source://rack-accept//lib/rack/accept/header.rb#75
  def name; end

  # Returns the quality factor (qvalue) of the given +value+. Should be
  # overridden in classes that mixin this module.
  #
  # source://rack-accept//lib/rack/accept/header.rb#81
  def qvalue(value); end

  # A table of all values of this header to their respective quality
  # factors (qvalues).
  #
  # source://rack-accept//lib/rack/accept/header.rb#67
  def qvalues; end

  # A table of all values of this header to their respective quality
  # factors (qvalues).
  #
  # source://rack-accept//lib/rack/accept/header.rb#67
  def qvalues=(_arg0); end

  # Sorts the given +values+ according to the qvalue of each while
  # preserving the original order. See #sort_with_qvalues for more
  # information on exactly how the sort is performed.
  #
  # source://rack-accept//lib/rack/accept/header.rb#130
  def sort(values, keep_unacceptables = T.unsafe(nil)); end

  # Returns a copy of the given +values+ array, sorted by quality factor
  # (qvalue). Each element of the returned array is itself an array
  # containing two objects: 1) the value's qvalue and 2) the original
  # value.
  #
  # It is important to note that this sort is a "stable sort". In other
  # words, the order of the original values is preserved so long as the
  # qvalue for each is the same. This expectation can be useful when
  # trying to determine which of a variety of options has the highest
  # qvalue. If the user prefers using one option over another (for any
  # number of reasons), he should put it first in +values+. He may then
  # use the first result with confidence that it is both most acceptable
  # to the client and most convenient for him as well.
  #
  # source://rack-accept//lib/rack/accept/header.rb#114
  def sort_with_qvalues(values, keep_unacceptables = T.unsafe(nil)); end

  # Returns a string representation of this header.
  #
  # source://rack-accept//lib/rack/accept/header.rb#140
  def to_s; end

  # Returns the value of this header as a string.
  #
  # source://rack-accept//lib/rack/accept/header.rb#86
  def value; end

  # Returns an array of all values of this header, in no particular order.
  #
  # source://rack-accept//lib/rack/accept/header.rb#91
  def values; end
end

# Represents an HTTP Accept-Language header according to the HTTP 1.1
# specification, and provides several convenience methods for determining
# acceptable content languages.
#
# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
#
# source://rack-accept//lib/rack/accept/language.rb#7
class Rack::Accept::Language
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  # Sets the attribute first_level_match
  #
  # @param value the value to set the attribute first_level_match to.
  #
  # source://rack-accept//lib/rack/accept/language.rb#9
  def first_level_match=(_arg0); end

  # Returns an array of languages from this header that match the given
  # +language+, ordered by precedence.
  #
  # source://rack-accept//lib/rack/accept/language.rb#26
  def matches(language); end

  # The name of this header.
  #
  # source://rack-accept//lib/rack/accept/language.rb#12
  def name; end

  # Determines the quality factor (qvalue) of the given +language+.
  #
  # source://rack-accept//lib/rack/accept/language.rb#17
  def qvalue(language); end
end

# Represents an HTTP Accept header according to the HTTP 1.1 specification,
# and provides several convenience methods for determining acceptable media
# types.
#
# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1
#
# source://rack-accept//lib/rack/accept/media_type.rb#7
class Rack::Accept::MediaType
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  # @return [MediaType] a new instance of MediaType
  #
  # source://rack-accept//lib/rack/accept/media_type.rb#42
  def initialize(header); end

  # Returns an array of media types from this header that match the given
  # +media_type+, ordered by precedence.
  #
  # source://rack-accept//lib/rack/accept/media_type.rb#25
  def matches(media_type); end

  # The name of this header.
  #
  # source://rack-accept//lib/rack/accept/media_type.rb#11
  def name; end

  # source://grape/2.0.0/lib/grape/middleware/versioner/parse_media_type_patch.rb#19
  def parse_media_type(media_type); end

  # Determines the quality factor (qvalue) of the given +media_type+.
  #
  # source://rack-accept//lib/rack/accept/media_type.rb#16
  def qvalue(media_type); end

  private

  # Returns true if all parameters and values in +match+ are also present in
  # +params+.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/media_type.rb#54
  def params_match?(params, match); end
end

# A container class for convenience methods when Rack::Accept is used on the
# request level as Rack middleware. Instances of this class also manage a
# lightweight cache of various header instances to speed up execution.
#
# source://rack-accept//lib/rack/accept/request.rb#7
class Rack::Accept::Request < ::Rack::Request
  # @return [Request] a new instance of Request
  #
  # source://rack-accept//lib/rack/accept/request.rb#10
  def initialize(env); end

  # Determines the best character set to use in a response from the given
  # character sets, if any is acceptable. For more information on how this
  # value is determined, see the documentation for
  # Rack::Accept::Header::PublicInstanceMethods#sort.
  #
  # source://rack-accept//lib/rack/accept/request.rb#70
  def best_charset(values); end

  # Determines the best encoding to use in a response from the given
  # encodings, if any is acceptable. For more information on how this value
  # is determined, see the documentation for
  # Rack::Accept::Header::PublicInstanceMethods#sort.
  #
  # source://rack-accept//lib/rack/accept/request.rb#78
  def best_encoding(values); end

  # Determines the best language to use in a response from the given
  # languages, if any is acceptable. For more information on how this value
  # is determined, see the documentation for
  # Rack::Accept::Header::PublicInstanceMethods#sort.
  #
  # source://rack-accept//lib/rack/accept/request.rb#86
  def best_language(values); end

  # Determines the best media type to use in a response from the given media
  # types, if any is acceptable. For more information on how this value is
  # determined, see the documentation for
  # Rack::Accept::Header::PublicInstanceMethods#sort.
  #
  # source://rack-accept//lib/rack/accept/request.rb#62
  def best_media_type(values); end

  # Provides access to the Rack::Accept::Charset instance for this request.
  #
  # source://rack-accept//lib/rack/accept/request.rb#20
  def charset; end

  # Returns true if the +Accept-Charset+ request header indicates the given
  # character set is acceptable, false otherwise.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/request.rb#42
  def charset?(value); end

  # Provides access to the Rack::Accept::Encoding instance for this request.
  #
  # source://rack-accept//lib/rack/accept/request.rb#25
  def encoding; end

  # Returns true if the +Accept-Encoding+ request header indicates the given
  # encoding is acceptable, false otherwise.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/request.rb#48
  def encoding?(value); end

  # Returns the value of attribute env.
  #
  # source://rack-accept//lib/rack/accept/request.rb#8
  def env; end

  # Provides access to the Rack::Accept::Language instance for this request.
  #
  # source://rack-accept//lib/rack/accept/request.rb#30
  def language; end

  # Returns true if the +Accept-Language+ request header indicates the given
  # language is acceptable, false otherwise.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/request.rb#54
  def language?(value); end

  # Provides access to the Rack::Accept::MediaType instance for this request.
  #
  # source://rack-accept//lib/rack/accept/request.rb#15
  def media_type; end

  # Returns true if the +Accept+ request header indicates the given media
  # type is acceptable, false otherwise.
  #
  # @return [Boolean]
  #
  # source://rack-accept//lib/rack/accept/request.rb#36
  def media_type?(value); end
end

# The base class for responses issued by Rack::Accept.
#
# source://rack-accept//lib/rack/accept/response.rb#5
class Rack::Accept::Response < ::Rack::Response
  # Marks this response as being unacceptable and clears the response body.
  #
  # Note: The HTTP spec advises servers to respond with an "entity" that
  # describes acceptable parameters, but it fails to go into detail about its
  # implementation. Thus, it is up to the user of this library to create such
  # an entity if one is desired.
  #
  # source://rack-accept//lib/rack/accept/response.rb#12
  def not_acceptable!; end
end
